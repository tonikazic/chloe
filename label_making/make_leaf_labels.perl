#!/usr/local/bin/perl

# this is ../c/maize/label_making/make_leaf_labels.perl
#
# this was adapted from ize/label_making/make_leaf_tags.perl,
# which uses the same layout geometry

# generate temporary plant tags for photographing leaves early
#
# Kazic, 8.7.2022


# tags can be constructed as follows:
#
#  1.  buy reams of 80 or 110 lb cardstock (ivory is nice)
#
#  2.  tags are laid out 1 3/8" wide x 4" long, 16 up
#
#  3.  print and cut along guide lines, cutting the stacks first, then
#  going in reverse order so that tags end up in rowplant order
#
# Kazic, 9.7.2022



# call is perl ./make_leaf_labels.perl CROP MOST_RECENT_SCORING_DATE FLAG

use strict;
use warnings;


use Cwd 'getcwd';


use lib './Typesetting';
use DefaultOrgztn;
use Guides;
use MaizeRegEx;
use TypesetGenetics;
use TypesettingMisc;
use GenerateOutput;



# fix directory managment using adjust_paths later

# ../crops/22r/management/

my $crop = $ARGV[0];
my $input_file_stem = $ARGV[1];
my $flag = $ARGV[2];

my $ucrop = uc($crop);

my $input_dir = "../crops/" . $crop . "/management/";
my $input_file = $input_dir . "current_leaf_tags.csv";
my $file_stem = $input_file_stem . "_leaf_tags";
my $output_dir = $input_dir;
$output_dir =~ s/management/tags/;
my $output = $output_dir . $file_stem . $tex_suffix;
my $i = 0;

my @lines;
my @labels;

# print "c: $crop\nuc: $ucrop\nid: $input_dir\nif: $input_file\nfs: $file_stem\nod: $output_dir\no: $output\n";




my $now = `date`;
chomp($now);





open my $in, '<', $input_file or die "sorry, can't open input file $input_file\n";
(@lines) = grep { $_ !~ /^[,#\s\n\t]/ } <$in>;
close($in);

# print map {"$_\n"} @lines[0 .. 6];
	

# we might not already have the barcode because of differences between
# current number and the prior stand count, so go ahead and check here
#
# path is relative to ./label_making

# my $foobar;
# foreach ( @lines ) { $foobar = substr($_,3,37); print "fb: $foobar\n"; }



# modified from Randal Schwartz's answer at https://www.perlmonks.org/?node_id=613264
my @lm_lines = map { local $_ = $_; s/^\.\.\///; chomp($_); $_ } @lines;
# print map {"$_\n"} @lm_lines[0 .. 6];



for ( my $i = 0; $i <= $#lm_lines; $i++ ) {
        my ($barcode_file) = $lm_lines[$i];
        chomp($barcode_file);
	
#        print "bf: $barcode_file b: $barcode\n";

        if ( ! -f $barcode_file ) {
		print "oops, no $barcode_file\n";
 	        my ($barcode) = $barcode_file  =~ /(${num_gtype_re})\.eps/;
                system("/usr/local/bin/barcode -c -E -b $barcode -u in -g \"2.25x0.75\" -e 128 -o $barcode_file");
	        }

        push(@labels,$barcode_file);
        }





# latex will be called from ../crops/CROP/tags, so the relative path to the
# barcodes must be from there, not ./label_making

my @tag_barcodes = map { "../../" . $_ } @labels;
# print map {"$_\n"} @tag_barcodes;
# print map {"$_\n"} @tag_barcodes[0 .. 6];





# now have to make the latex files for the labels, moving over @labels
# changing the directory to where the source tex file is

if ( $flag eq 'go' ) {
        open my $out, '>', $output or die "can't open $output\n";
        print $out "\n\n\n\n% this is $output\n% generated by ../../../label_making/make_leaf_labels.perl\n% from input $input_file\n% on $now\n\n\n";


        &begin_latex_file($out);
        chdir($output_dir);
        for ( $i = 0; $i <= $#tag_barcodes; $i++ ) { &print_leaf_tag_label($out,$tag_barcodes[$i],$i,$#tag_barcodes); }
        &end_latex_file($out);
        close($out);



# print "($output_dir,$file_stem,$ps_suffix,$pdf_suffix)\n";

        &generate_pdf($output_dir,$file_stem,$ps_suffix,$pdf_suffix);
        }


elsif ( $flag eq 'test' ) { print map {"$_\n"} @tag_barcodes; }
elsif ( $flag eq 'q' ) { }  # do nothing






# thanks, Gabor!
# https://perlmaven.com/how-to-exit-from-perl-script

if ( ( $flag eq 'test' ) || ( $flag eq 'q' ) ) { exit 42; }
