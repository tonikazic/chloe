#!/opt/perl5/perls/perl-5.26.1/bin/perl

# this is ../c/maize/crops/make_seed_packet_file.perl 


# If we don't have any prolog, we still need to generate the seed_packed_labels
# file from sequenced.packing_plan.pl.  So this script does that.
#
# 
# call is perl ./make_seed_packet_file.perl CROP
#
# Kazic, 23.5.2017



# port to 5.26 untested
#
# Kazic, 17.4.2018



use strict;
use warnings;


use lib './Typesetting/';

use DefaultOrgztn;
use MaizeRegEx;




my $crop = $ARGV[0];
my $uccrop = uc($crop);

print `pwd`;

my $today = `date`;
chomp($today);


my $in_file = "$crop/planning/sequenced.packing_plan.pl";
my $out_file = "$crop/management/seed_packet_labels";



my $demeter_dir =~ s/^\.\.\///;
my $inbred_file = $demeter_dir .  "current_inbred.pl";





# get the family numbers for the current inbreds.

open my $inbred_fh, '<', $inbred_file or die "can't open $inbred_file\n";

while (<$inbred_fh>) {
        if ( $_ =~ /$uccrop/ ) { 
	        ($ima,$cur,$packet) = $_ =~ /\',(\d{3}),\d{3},(\d{3}),(p\d{5})\).$/;
#                print "($ima,$cur,$packet)\n";
                $inbred{$ima} = $cur . "::" . $packet;
                }
        }







open my $in, '<', $input_file  or die "can't open $input_file\n";
open my $out, '>', $out_file  or die "can't open $out_file\n";




print $out "% this is $out_file
% generated by ../maize/crops/make_seed_packet_file.perl
% on $today for crop $crop.
%
% This file does not have the packets in inventory order!
% Re-ordering must be done manually before generating the labels!
% \n\n\n";





my $p = 10;

while (<$in>) {

	if ( $_ =~ /^packing_plan/ ) {
		my ($row,$num_packets,$elite,$planting,$rest,$ma,$pa,$cl,$ft,$family,$pnum,$padding,$packet,$ma_ifam,$record);
		my %inbred;
		
                if ( $_ =~ /elite/ ) { 
		        ($row,$num_packets,$elite,$planting,$rest) = $_ =~ /^packing_plan\((\d+),(\d+),\[(elite)\],(${planting_re}),(.*)/; 

		        $ma = $elite;
		        $pa = $ma;
                        ($cl,$ft) = $rest =~ /(${cl_re}),(${ft_re})\)\.$/;
                        }

                else {
                        ($row,$num_packets,$ma,$pa,$planting,$rest) = $_ =~ /^packing_plan\((\d+),(\d+),\[\'(${num_gtype_re})\'?[,x\s\']+(${num_gtype_re})\'\],(${planting_re}),(.*)/; 

                        ($cl,$ft) = $rest =~ /(${cl_re}),(${ft_re})\)\.$/;
		        }


		
# family and packet assignment

		if ( $ma !~ /xxxx/ ) { 
                        $family = '0000'; 
                        $pnum = length($p);
			$padding = 5 - $pnum;
			$packet = "p" . "0" x $padding . $p;
			$p++;
		        }
		
                else { 
		        ($ma_ifam) = $ma =~ /\d{2}[NRG](\d{3})\:/;
                        $record = $inbred{$ma_ifam};
                        ($family,$packet) = split(/::/,$record);
                        }
		
#                print "($row,$num_packets,$ma,$pa,$planting,$cl,$ft,$family,$packet)\n";


# now after all this, print the re-arranged line to the output file
# stopped here

		print $out "$packet,$family,$ma,$pa,$cl,$ft,v00,$num_packets,$row,$planting\n";

	        }
	}




