#!/usr/local/bin/perl

# this is . . . /maize/demeter/data/merge_plan_data.perl
#
# Given the final plan.pl and packing_plan.pl facts for the previous crop,
# substitute the planting, plan, and comments facts from the plan.pl into the
# packing_plan.pl facts (since the plan.pl are revised during scoring), and
# substitute these revised facts for the originals and put in a new packing_plan.pl
# file for the current crop.  Remove sequence numbers as we go.
#
# Given a new packing_plan.pl file without sequence numbers, rewrite with 
# sequence numbers.
#
# Kazic, 9.4.2013

# call is merge_plan_data.perl TASK CURRENT_CROP [PRIOR_CROP]
#
# where task is one of {merge,sequence}; *CROPs are the numbers of the current and prior crops.
# PRIOR_CROP is required only for the merge operation.  Both CROPs are lower-case, e.g., 12n.


# both the packing_plan.pl format and (apparently) the planting_re had changed since this was written.  
# Modified code as marked so it all works again.
#
# Most importantly, last year I switched to doing the planning in org mode.
# The comments and section headers are invaluable. So changed the input
# plan file to the packing_plan.org file this year.
#
# Kazic, 21.4.2015


use lib qw(../label_making/);
use Typesetting::MaizeRegEx;
use Typesetting::DefaultOrgztn;



$operation = $ARGV[0];
$current_crop = $ARGV[1];
$prior_crop = $ARGV[2];
$crop_str = uc($prior_crop);
$current_crop_string = uc($current_crop);


if ( $current_crop =~ /\d+[rR]/ ) { $cl = 15; }
elsif ( $current_crop =~ /\d+[nN]/ ) { $cl = 13; }



$today = `date`;
chomp($today);

# pre-15r
#
# $prior_packing_file = "$prior_crop/planning/packing_plan.pl";
# $current_packing_file = "$current_crop/planning/packing_plan.pl";

# 15r and later

$prior_packing_file = "$prior_crop/planning/packing_plan.org";
$plan_file = "../demeter/data/plan.pl";
$current_packing_file = "$current_crop/planning/packing_plan.org";
$prolog_packing_file = "$current_crop/planning/packing_plan.prolog";
$numbered_packing_file = "$current_crop/planning/sequenced.packing_plan.pl";


if ( $operation eq "merge" ) {

        open(PRIOR,"<$prior_packing_file") or die "can't open $prior_packing_file\n";
        open(PLAN,"<$plan_file") or die "can't open $plan_file\n";
        open(OUT,">$current_packing_file") or die "can't open $current_packing_file\n";


        print OUT "% this is $current_packing_file
% generated by ../maize/crops/merge_plan_data.perl
% on $today for crop $current_crop.
%
% The most recent plan data are derived from $plan_file for the $prior_crop.  These
% are substituted into the packing_plan.pl data for $prior_crop to generate
% packing_plan/10 facts that are in the previous sequence, but not numbered.
%
% Wait until all packing_plan/10 facts are written, and in the correct sequence,
% before re-running the script to insert the sequence numbers for planting!\n\n\n";



        while (<PLAN>) {

                if ( ( $_ =~ /\'$crop_str\'\)./ ) 
                     && ( $_ !~ /^\%/ )  
                     && ( $_ !~ /\[gerry\]/ ) && ( $_ !~ /\[inbred\]/ ) ) {


                        my ($ma,$pa,$planting,$plan,$comment) = $_ =~ /plan\(\'(${num_gtype_re})\',\'(${num_gtype_re})\',(${planting_re}),(\[${plan_re}\]),(\'${notes_re}\')/;

#                        print "$_ $ma,$pa,$planting,$plan,$comment)\n";

                        if ( $ma eq "" ) { print "empty ma: $_ ($ma,$pa,$planting,$plan,$comment)\n"; }

                        $plans{$ma} = $pa . "::" . $planting . "::" .  $plan . "::" .  $comment;
                        }
	        }

close(PLAN);


#                if ( ( $_ =~ /[\*\w\%\#]+/ ) 

        while (<PRIOR>) {
                if ( $_ !~ /^packing_plan/ ) { print OUT $_; }
                else {

#                        my ($packets,$pma,$ppa,$K) = $_ =~ /\(\d+,(${planting_re}),\[\'(${num_gtype_re}) x (${num_gtype_re})\'\],.+,\'(${knum_re})\',\'${crop_re}\',\d+,\d+\)/;
#
# oops, packing_plan.pl no longer has row numbers as first argument! and some other things have changed.
#
# Kazic, 21.4.2015

                        if ( $_ !~ /\[gerry\]/ ) { 


                                my ($packets,$pma,$ppa,$K) = $_ =~ /\(,(${planting_re}),\[\'(${num_gtype_re}) x (${num_gtype_re})\'\],\d,.+,\'(${knum_re})/; 


#                                print "$packets:$pma:$ppa:$K\n";

# kinda handy not to have to cut and paste the inbred lines
#
# Kazic, 21.4.2015



                                if ( $_ =~ /\[(inbred|elite)\]/ ) { print OUT $_; }


                                elsif ( exists $plans{$pma} ) {
                                        ($pa,$planting,$plan,$comment) = split("::",$plans{$pma});
#                                        print "$pa,$planting,$plan,$comment\n";
                                        
                                        if ( $pa ne $ppa ) { print "Warning! males $pa and $ppa do not match for ear $ma!\n"; }

                                        else { print OUT "packing_plan(,$packets,['$pma x $pa'],$planting,$plan,$comment,'$K',$cl,10).\n"; }
				        }
			        }
		        }
	        }

close(PRIOR);
close(OUT);
        }










# finished!
#
# Kazic, 5.6.2014



elsif ( $operation eq "sequence" ) {

        open(CUR,"<$prolog_packing_file") or die "can't open $prolog_packing_file\n";
        open(OUT,">$numbered_packing_file") or die "can't open output file $numbered_packing_file\n";

        print OUT "% this is $numbered_packing_file\n% generated by ../maize/crops/merge_plan_data.perl using operation sequence \n% on $today for crop $current_crop.\n\n\n";

        my $i = 1;

        while (<CUR>) {

	         if ( $_ =~ /^packing_plan/ ) {
#                        print $_;		
                        my ($front,$middle,$end) = $_ =~ /^(packing_plan\()(,.+)(,\d{2},\d{2}\).)$/;
#                        print "$i $front $middle $end\n";
                        print OUT $front . $i . $middle . ",'" . $current_crop_string . "'" . $end . "\n";
                        $i++;
                        }

                else { print OUT $_; }
	        }

        close(CUR);
        close(OUT);
        }
