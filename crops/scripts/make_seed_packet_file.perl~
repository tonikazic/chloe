#!/usr/bin/perl

# this is . . ./maize/crops/make_seed_packed_file.perl 

# If we don't have any prolog, we still need to generate the seed_packed_labels
# file from sequenced.packing_plan.pl.  So this script does that.
#
# 
# call is perl ./make_seed_packet_file.perl CROP
#
# Kazic, 23.5.2017


use lib qw(../label_making/);
use Typesetting::DefaultOrgztn;
use Typesetting::MaizeRegEx;

$crop = $ARGV[0];

print `pwd`;

$today = `date`;
chomp($today);


$in_file = "$crop/planning/sequenced.packing_plan.pl";
$out_file = "$crop/planning/seed_packet_labels";




open(IN,"<$in_file") or die "can't open $in_file\n";
open(OUT,">$out_file") or die "can't open $out_file\n";

print OUT "% this is $out_file
% generated by ../maize/crops/make_seed_packet_file.perl
% on $today for crop $crop.
%
% This file merges the contents of the $in_file with the 
% numbered rows from the $current_packing_file.  It writes out this file
% for contingency planning in the event the plantings are delayed too far
% or the planting window is far too short.
%
% To remove rows from planting, just set that block to not tangle, and
% then export the prolog.  Easy!\n\n\n";



# revised condition with second clause untested; added to preserve inbred row numbers
#
# Kazic, 7.6.2015

while (<IN>) {

        if ( ( $_ =~ /(inbred|elite)/ ) { 
                print $_; 
                }

        else {
	    
                my ($row,$num_packets,$ma,$pa,$cl,$ft,$planting) = $_ =~ /^packing_plan\((\d+),(\d+),\[\')(${num_gtype_re})[\s\, x]+${num_gtype_re})\'\],(${planting_re}),(${planting_re}),(${planting_re})/;
                print "($row,$num_packets,$ma,$pa,$cl,$ft,$planting)\n";



#		print OUT "packing_plan(" . $row . $front . $parents . $middle . $planting . $rest. "\n";

	        }

        }



close(IN);
close(OUT);


