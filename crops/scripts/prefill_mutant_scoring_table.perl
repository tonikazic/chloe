#!/usr/local/bin/perl


# this is ../c/maize/crops/scripts/prefill_mutant_scoring_table.perl

# this file takes the ../crops/CROP/barcode_list file generated by
# crop_management:generate_plant_tags_file/3, filters out the inbreds,
# sorts the remainder into rowplant order, and then generates a csv file
# for loading into Numbers.
#
# The code assumes toni does the scoring and that all plants are wild type.
# In collecting the data, we only alter entries that are not.
#
# It does NOT prefill the scoring date for each row, since those data are
# now recorded in ../c/maize/demeter/data/scoring_date/6.  Thus, rescorings
# of individual plants are now silent.  These should be captured in the
# last field of the spreadsheet, and inserted into the Prolog facts later.
#
# The mutant data will be processed by
# ../c/maize/data/data_conversion/convert_mutant_data.perl, which will
# insert the dates of scoring.
#
#
# See also crop_management:prefill_mutant_table/1 for another version of
# this!  That code assumes that all rows we want to score officially have
# been entered as row_scored/6? facts and the saved state updated.
#
# Kazic, 4.8.2023


# call is ./prefill_mutant_scoring_table.perl CROP FLAG
#
# where CROP is lower-cased (e.g., 23r) and FLAG is one of {test,go,q}.




use strict;
use warnings;

use Cwd 'getcwd';



use lib '../../label_making/Typesetting/';
use DefaultOrgztn;
use MaizeRegEx;



# our $crop = $ARGV[0]; in DefaultOrgztn

my $flag = $ARGV[1];
my $local_dir = getcwd;
my ($dir,$input_dir) = &adjust_paths($crop,$local_dir);



my $barcode_file = $input_dir . "barcode_list";
my $output_file = $input_dir . "raw.mutant.csv";
my $out_fh;



my @plants;
my %ordered;
my $uc_crop = uc($crop);


my $today = `date`;
chomp($today);

# print "$flag,$crop,$local_dir,$dir,$input_dir,$barcode_file,$output_file,$today\n";




open my $in, '<', $barcode_file  or die "can't open $barcode_file\n";
(@plants) = grep { $_ !~ /%/ && $_ !~ /^\n/ && $_ !~ /\#/ && $_ !~ /[SWMBLFGHXYZ]/ } <$in>;
close($in);



# this is the 2d hash $ordered{$row}{$plant}

for ( my $i = 0; $i <= $#plants; $i++ ) {

        my ($plantID,$rowplant,$row,$plant);
	$plantID = $plants[$i];
	chomp($plantID);
	($rowplant) = $plantID =~ /(${rowplant_re})/;
	($row,$plant) = $rowplant =~ /(\d{5})(\d{2})/;
	
        $ordered{$row}{$plant} = $plantID;

#	print "$plants[$i]";
#	print "$plantID,$rowplant,$row,$plant\n";
        }





if ( $flag eq 'go' ) {

        open $out_fh, '>', $output_file or die "sorry, can't open the ordered output file $output_file\n";
	        print $out_fh "# this is $output_file\n\n
# the ordered prefilled mutant scoring sheet for $crop
#
# generated on $today
# by ../c/maize/crops/scripts/prefill_mutant_scoring_table.perl
# from the filtered barcode file $barcode_file.
#
# After opening this output csv file in Numbers, copy these columns into the new_mutant.numbers 
# template spreadsheet to retain the drop-down menus for height, tassel, ear, and observer
# and check that all formats are correct!\n\n\n
plantID,wild_type,lesion,cross,photo,sample,\n";
        }





# sort first on $row and then on $plant


foreach my $row ( sort { $a cmp $b } keys %ordered ) {
        foreach my $plant ( sort { $a cmp $b } keys %{ $ordered{$row} } ) {
		my $plantID = $ordered{$row}{$plant};

		if ( $flag eq 'q' ) { }  # do nothing
		elsif ( $flag eq 'test' ) { print "$plantID,$row,$plant\n"; }
		elsif ( $flag eq 'go' ) { print $out_fh "$plantID,1,0,0,0,0,\n"}
		}
	}




# whines since this isn't always opened
#
# close($out_fh);





# thanks, Gabor!
# https://perlmaven.com/how-to-exit-from-perl-script

if ( ( $flag eq 'test' ) || ( $flag eq 'q' )  || ( $flag eq 'go' ) ) { exit 42; }
