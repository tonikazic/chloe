how to generate pedigrees, plant tags, and field book
revised <2014-06-02 Mon> :toni:

* preliminaries

.  finish inventory.pl: draw data from harvest.pl facts, sorting by hand in
emacs.  The sorting heuristic for both seed and data is to first delete any
failed or discarded ears.  Then order selves first; and then S, W, M, and B
maternal parents.  Treat other NAM founder maternal parents as if they were
among the mutant selves, since they are (mostly) planted this way.  Then
crop improvement; then finally popcorn.



Noto bene:  all seed was shelled and re-inventoried in early 2014, and
sorting should match this post-hoc description.



. be sure that demeter/data/crop.pl includes all crops that have yielded
offspring.  Usually the most recent crop will be missing.  It must be
present, or none of its offspring will appear in the pedigrees.



.  recalculate indices using genetic_utilities:make_indices/3!!!!  This
 must be done in two steps because the incremental update predicate for the
 indices has not been made.  Use the most recent predicate, which is split.

   + use the phasma call to compute the new indices, which places files in
     [[file:/home/toni]]. Follow the most recent directions in
     [[file:/athe/c/maize/demeter/code/genetic_utilities.pl]]: look for
     make_indices.  You want to use the two predicates make_first_index/1
     and make_rest_of_indices/2).  Be sure to kill and restart the prolog
     process, edit [[file:planting_index.pl]] per the messages, and then
     compute the other two indices.

   + tar up the old version of the data.  The most recent date of the *.pl
     files is inserted into the archive name::
#+BEGIN_SRC 
$ pwd
/athe/c/maize/demeter
$ tar cvf archival/db_data.25.3.2015.tar data/*.pl
$ ls -lt archival/
total 1044224
-rw-r--r--   1 toni  staff  43250176 Mar 26 18:33 db_data.25.3.2015.tar
....
#+END_SRC

   + scp the new index files to [[file:/athe/c/maize/demeter/data]].

   + on phasma, start prolog and at the prolog prompt, [load_demeter].

   + check compilation of the data.  You shouldn't have any syntax errors.
     You will have two old errors, both related to Klotho and Moirai, when
     the code is compiled.

   + make sure you have /home/toni/demeter/results/CROP_planning.
     If it exists and is unempty, delete all its subdirectories.

   + Again kill and restart the prolog process.




* pedigree computation

. on phasma, [[file:~toni/demeter/results/CROP_planning]].  If
this directory is not empty when pedigrees:trace_pedigrees/1 is run, the
predicate will fail.



.  calculate current pedigress using pedigrees:trace_pedigrees/1.

A number of warnings will appear; these should be copied and pasted into
[[file:/athe/c/maize/crops/CROP/planning/warnings]] for manual checking.


It doesn't matter whether we do this from the unix or emacs command lines,
on phasma or tritogeneia:
it always breaks here:

! Existence error in argument 1 of format/3
! stream '$stream'(37421059) does not exist
! goal:  format('$stream'(37421059),'~55| ~w: ~w',['12N661:M0035306',[]])

We get the important pedigrees, anyway, but it's disturbing.  Looks like it
breaks at the NAM founders?


It didn't appear until 12n, I believe . . . so there is probably some
missing data.


. move the pedigrees on phasma to
[[file:/athe/c/maize/CROP/planning/current_pedigrees]].  The pedigrees are grouped
into subdirectories for faster analysis.


.  It is very helpful to compare this crop's pedigrees with the last crop's.
Of course, the last crop's pedigrees won't have its offspring in the
pedigree, so these must be ablated.  Follow directions in
[[file:/athe/c/maize/crops/ablate_crops_offspring.perl]] to do so.


. This make take a few iterations of fact-checking, index compilation, and
pedigree building.  We may gain branches in our pedigrees, but we shouldn't
lose any previous branches except for an extremely good reason.  The
pedigree calculation is based on numerical genotypes, not symbolic ones, so
misassignment of genes and K numbers, etc., shouldn't affect the results
UNTIL we compute tags and the field book.  Then it will matter a lot.  At
this stage, the worst that can happen is that a line is in the wrong place
in the field.


.  Once the pedigrees are satisfactory, then on athe, generate the pdf
files for iAnnotate using [[file:/athe/c/maize/crops/make_pdf_pedigrees.perl]].
This can be done in emacs if that was started with emacs -nw; otherwise, it
must be run in terminal, not emacs from the dock icon, so that the path to
enscript is found.  The script assumes the ascii pedigrees are in
[[file:/athe/c/maize/crops/CROP/current_pedigrees]] and generates a parallel
subdirectory [[file:/athe/c/maize/crops/CROP/pdf_pedigrees]].




.  transfer pedigrees to the ipad using dropbox, which preserves the
directories.  To do this, link the root of the pdf_pedigrees to
[[file:~/Dropbox/Apps/iannotate/]], then start a Dropbox process
([[file:/Applications/Dropbox.app/Contents/MacOS/Dropbox]]) to push these to
the cloud (don't worry about Dropbox complaints, just give it a few moments
and then kill the Dropbox process).  It's a good idea to log into Dropbox
and make sure everything is there before starting the download to the ipad.
Dropbox syncing is nicer than syncing over iTunes because the helpful directory
structure is preserved.




* crop planning

** making the planning file

. run [[file:/athe/c/maize/crops/merge_plan_data.perl]] in operation merge to
fuse the prior year's packing_plan.pl and last year's final plan
information, stripping out row number and crop identifier.

call is perl ./merge_plan_data.perl merge  CURRENT_CROP PRIOR_CROP


. rename to org mode, it seems to help enormously just to be able to fold and unfold
the file.


. edit the packing_plan.org file to represent what we really want to do.
Note that there should be NO Crop argument at this point.

   + Insert the packing_plan facts between prolog source code blocks as
     these can be automatically tangled into source code.

   + Hand-correct cl and ft fields for inbreds, and other lines as needed.

   + Skip one line between sets, multiple lines between mutants.


   + If there are spreadsheet data from Gerry, convert them from Gerry's
     spreadsheet into packing_plan/10 by hand.  BE CAREFUL!  Not every row
     has a line in his spreadsheet, but does have a card in his field book.



. Grep for total rows, planting number, inbred destination, etc. and tally
in an org table.


. Use the spreadsheet calculator function of org-mode and emacs calc to
compute the inbred rows and total rows from the org tables.  Infix operator
is :=.




. generate packing_plan.pl from packing_plan.org using Babel's tangle: ^c
^v t.  Rename packing_plan.prolog.  Works great!



** to number rows:

. input to [[file:/athe/c/maize/crops/merge_plan_data.perl]] to number rows is:

packing_plan(,NumPackets,etAlternativeParents,Plntg,CrossInstructns,SetInstructions,
                   KNum,Cl,Ft).

nb: no Crop argument, this will be inserted on generating row sequence
numbers.



. re-run  [[file:/athe/c/maize/crops/merge_plan_data.perl on packing_plan.pl in sequence mode to
insert row numbers and Crop argument.

call is perl ./merge_plan_data.perl sequence CURRENT_CROP



* packing and planting


** to generate plan and input for packet labels

. on tritogeneia, move to maize/crops/CROP/planning/packing_plan.pl.


.  use pack_corn:pack_corn/1 to generate plan/6, packet labels, and row
sequence labels.   Include the inbreds so that every packet has the correct
row number.



   + input to pack_corn/1:

#+begin_src prolog :tangle no

packing_plan(RowSequenceNum,NumPackets,
                   SetAlternativeParents,Plntg,CrossInstructns,SetInstructions,
                   KNum,Crop,Cl,Ft)

#+end_src


   + make sure current_crop:current_crop/1 is up to date.


. Predicate will fail if harvest facts absent!


** packet labels


. Manually order the packet label facts into inventory order.  Trial
algorithm in crop_management.pl is incorrect.


. Ensure [[file:../maize/crops/CROP/{management,tags}]] and 
[[file:../maize/barcodes/CROP]] exist.


. Run label_making/make_seed_packet_labels.perl to generate the stickers, and
print.



** packing

. Pack corn, generating packed_packet/7 facts.  Check carefully for any
missing plan/6 facts.


   + Students can pack inbreds relatively unsupervixed --- one
{person,team}/inbred/bench!  

   + :toni: pack mutants, but you can have help fetching and scanning.



** planting

. Lay out field using four tape measures to get the corners square enough.

. If soybeans, cover those rows with black paper until after Chris has
sprayed with herbicide, then plant.

. Plant corn, recording and generating planted/8 facts. These must be
confected for the winter nursery from work order spreadsheet, since they
don't scan the packets or stakes!




* post-planting data collection



. Collect row_status facts for stand counts, confect if necessary for
winter nursery.

   + It is extremely important to accurately collect these data!

   + Go through the field systematically, looking at every row, each time.
     When we've just looked at rows that were empty and skipped around, we
     had a lot of missing data!

   + Two people are better at this job, one to count and call out the
     result, and the other to record.  WALK DOWN THE ROW --- do not rely on
     standing at one end of the row and eyeballing!  Even baby plants hide
     behind each other.  Beats me how they do it, but they know you are
     looking at them and duck.



* pre-processing stand count data and generation of new family numbers


. If corn that was not previously planted is planted in the current crop,
then it's families will not have been assigned.  Therefore, the
crop_rowplant/4 and row_members/3 WILL NOT HAVE THE RIGHT FAMILIES!  So run
crop_management:generate_plant_tags_file/2 to get the family numbers;
revise; re-compute indices; re-compute tags and field book.



.  Make list of priority rows and run
crop_management:generate_plant_tags_file/2.  This automatically assigns
family numbers and fgenotype facts.  Check fgenotype facts and convert them
to genotype facts; then re-run to ensure correct genotypes and K numbers
will be on tags and field book.


.  recalculate indices, saving old ones just in case, often.  Recalculate after
all stand count data in.



** DONE revise family number assignment so that gaps are NOT filled in :toni:
 and family numbers are not re-used


No more number re-use, we will just re-arrange the plantIDs when we get
past 9999!


If a new (that is, previously unplanted) family is planted more than once in a crop,
generate_plant_tags_file/2 will issue multiple family numbers for each
row.  These must be edited out by hand in genotype.pl, then the tags and
field book recompiled.





* field book production

. Re-run crop_management:generate_plant_tags_file/2.  Make sure all
genotypes and family numbers are now correct (this was done in the prior section!).


.  analyze_crop:identify_mutant_row_plans/2 to generate field book data,
    now suitable for ipad.  This requires packing_plan/10 facts that have
    already been converted to plan/6 facts.  Use enscript to generate the
    output. 



.  If needed, independently check prolog field book by running
crops/check_row_assignments.perl.  It gives the planting number, which is
useful (add to field book someday).  And then someday add automatically
generated cut-down jpegs of images . . .




* plant tag production

. crop_management:generate_plant_tags_file/2 will generate the perl input
file of plant tags.

.  generate plant tags using perl script




* emergency plant tag and field book production


#+begin_rmk


<2014-06-19 Thu> :toni:

Trito needs to be shut down as the air conditioner is leaking, so we are
going to confect data for the second and third plantings, and the
row_status facts, then compute.  I've already fixed the family number
re-use problem.


#+end_rmk


** to confect planted/8 and row_status/7

. grepped second and third planting from sequenced.packing_plan.pl, which
has row numbers and ma and pa

. wrote clean_data:confect_planting_n_stand_count_data/4, which confected
dummy row_status facts for all planted and unplanted corn, and planted/8
facts for unplanted corn in the second and third plantings.


. sorted data in output file and appended, with appropriate comments, to
planted.pl and row_status.pl


. recomputed indices, plant tags, and field book per usual.  BUT we
discovered the directions needed a little work!
