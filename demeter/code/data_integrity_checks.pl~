% this is demeter/code/data_integrity_checks.pl

% predicates to check stuff
%
% Kazic, 19.4.08


%declarations%

:-      module(data_integrity_checks,[
                check_knums/1,
                find_missing/1,
		find_missing/2
                ]).





:-      use_module(pedigrees,[
                descendant/3,
                find_planted/3
                ]).


:-      use_module(genetic_utilities),
        use_module(demeter_tree('data/load_data')).      




:-      ensure_loaded(library(basics)),
        ensure_loaded(library(sets)),
        ensure_loaded(library(lists)),
        ensure_loaded(library(strings)).





%end%




% check that Knums are present in the immediate descendants of
% the founders
%
% Kazic, 20.1.2011

% call: [load_demeter, data_integrity_checks],spy(check_ks_backward),check_knums(L).

check_knums(Out) :-
        ensure_loaded('../data/track.pl'),
        setof(Gene,K^Mas^Type^File^track(Gene,K,Mas,Type,File),Genes),
        get_gene_founders(Genes,Founders,MissingFounders),
        setof(SK,SGene^SMas^SType^SFile^track(SGene,SK,SMas,SType,SFile),Ks),
        check_descendants(Founders,MissingFounders,Ks,MissingGenotypes,Out).




get_gene_founders(Genes,Founders,MissingFounders) :-
        get_gene_founders(Genes,[],Founders,[],MissingFounders).



get_gene_founders([],A,A,B,B).
get_gene_founders([Gene|Genes],Acc,Founders,MissAcc,MissingFounders) :-
        ( setof((MN,PN,Gene,Family,K),MG1^MG2^PG1^PG2^founder(Family,MN,PN,MG1,MG2,PG1,PG2,[Gene],K),GeneFounders) ->
                append(Acc,GeneFounders,NewAcc),
                NewMissAcc = MissAcc
	;
                format('Warning!  No founder for gene ~w!~n',[Gene]),
                NewAcc = Acc,
                append(MissAcc,[Gene],NewMissAcc)
        ),
        get_gene_founders(Genes,NewAcc,Founders,NewMissAcc,MissingFounders).






check_descendants(Founders,MissingFounders,Ks,MissingGenotypes,[Out1,Out2]) :-
        get_immediate_descendants(Founders,Descendants,MissingGenotypes),
        check_ks_forward(Descendants,Ks,Out1),
        check_ks_backward(Descendants,Ks,Out2).





get_immediate_descendants(Founders,Descendants,MissingGenotypes) :-
        get_immediate_descendants(Founders,[],Descendants,[],MissingGenotypes).







get_immediate_descendants([],A,A,B,B).
get_immediate_descendants([(MN,PN,Gene,Family,K)|Founders],DescAcc,Descendants,
                                                        MissAcc,MissingGenotypes) :-


        ( find_planted(MN,PN,PlantList) ->
                 ( get_immediate_descendants_aux(PlantList,ImmDescendants) ->
                         append(DescAcc,[(MN,PN,Gene,Family,K)-ImmDescendants],NewDescAcc),
                         NewMissAcc = MissAcc
		 ;
                         append(MissAcc,[(MN,PN)],NewMissAcc),
                         NewDescAcc = DescAcc
                 )
	;
                 append(MissAcc,[(MN,PN)],NewMissAcc),
                 NewDescAcc = DescAcc
        ),
        get_immediate_descendants(Founders,NewDescAcc,Descendants,NewMissAcc,MissingGenotypes).







get_immediate_descendants_aux([],[]).
get_immediate_descendants_aux([Plant|PlantList],[Info|Descendants]) :-
        ( setof((DescMN,DescPN),descendant(Plant,DescMN,DescPN),NextGen) ->
	        grab_rest(NextGen,Info)
	  ;
                Info = []
        ),
        get_immediate_descendants_aux(PlantList,Descendants).








% these are Gene, Family, and K of the descendants!  Gene should be constant;
% Family of immediate descendants should be same as founder for the male only;
% and K is likely to change from empty atom to Knum.

grab_rest([],[]).
grab_rest([(MN,PN)|T],[(MN,PN,Gene,Family,K)|T2]) :-
        ( genotype(Family,_,MN,_,PN,_,_,_,_,[Gene],K) ->
                true
        ;
                format('Warning! missing genotype/11 fact for ~w x ~w!~n',[MN,PN])
        ),
        grab_rest(T,T2).









check_ks_forward(Descendants,Ks,Out) :-
        check_ks_forward(Descendants,Ks,[],Out).



check_ks_forward([],_,A,A).
check_ks_forward([(MN,PN,Gene,Family,K)-_|T],Ks,Acc,Out) :-
        ( memberchk(K,Ks) ->
                NewAcc = Acc
	  ;
                append(Acc,[(MN,PN,Gene,Family,K)],NewAcc)
        ),
        check_ks_forward(T,Ks,NewAcc,Out).








check_ks_backward(Descendants,Ks,Out) :-
        check_ks_backward(Descendants,Ks,[],Out).



check_ks_backward(_,[],A,A).
check_ks_backward(Descendants,[K|Ks],Acc,Out) :-
        ( memberchk((_,_,_,_,K)-_,Descendants) ->
                NewAcc = Acc
	  ;
                append(Acc,[K],NewAcc)
        ),
        check_ks_backward(Descendants,Ks,NewAcc,Out).










%%%%%%%%%%%%%%

find_missing(File) :-
        setof((Ma,Pa,Sleeve),W^H^Q^C^P^D^T^inventory(Ma,Pa,W,H,Q,C,P,D,T,Sleeve),Have),
        setof((DMa,DPa,DSleeve),DW^DH^DQ^DC^DP^DD^DT^dup_inv(DMa,DPa,DW,DH,DQ,DC,DP,DD,DT,DSleeve),Extras),
    	find_missing(ma,Have,Extras,MissingMas),
	find_missing(pa,Have,Extras,MissingPas),
	find_missing(blank,Have,Extras,Blanks),
	find_missing(sleeve,Have,Extras,MissingSleeves),
        skipped_sleeves(Have,Skipped),
	output_missing(File,MissingMas,MissingPas,Blanks,MissingSleeves,Skipped).












find_missing(Type,Have,Extras,MissingMas) :-
        find_missing(Type,Have,Extras,[],MissingMas).



find_missing(_,[],_,A,A).
find_missing(Type,[(Ma,Pa,Sleeve)|T],Extras,Acc,Missing) :-
        ( Type == ma ->
                ( ( Ma == '', Pa \== '' ) ->
		        append(Acc,[(Ma,Pa,Sleeve)],NewAcc)
                ;
                        ( memberchk((Ma,_,_),Extras) ->
		                NewAcc = Acc
		        ;
			        append(Acc,[(Ma,Pa,Sleeve)],NewAcc)
		        )
                )
	;
	        ( Type == pa ->
                        ( ( Pa == '', Ma \== '' ) ->
			        append(Acc,[(Ma,Pa,Sleeve)],NewAcc)
                        ;

				( memberchk((_,Pa,_),Extras) ->
			                NewAcc = Acc
			        ;
				        append(Acc,[(Ma,Pa,Sleeve)],NewAcc)
                                )
			)
		;
			( Type == blank ->
			        ( ( Ma == '', Pa == '' ) ->
			                append(Acc,[(Ma,Pa,Sleeve)],NewAcc)
			        ;
				        NewAcc = Acc
			        )
			;
				Type == sleeve,
			        ( memberchk((_,_,Sleeve),Extras) ->
			                NewAcc = Acc
			        ;
				        append(Acc,[Sleeve],NewAcc)
			        )
			)
		)
	),
	find_missing(Type,T,Extras,NewAcc,Missing).




skipped_sleeves(Have,Skipped) :-
        grab_sleeves(Have,Sleeves),
	list_to_set(Sleeves,SleeveSet),
	count_sleeves(SleeveSet,Skipped).




grab_sleeves([],[]).
grab_sleeves([(_,_,S)|T],[S|T2]) :-
        grab_sleeves(T,T2).



count_sleeves(SleeveSet,Skipped) :-
        strip_headers(SleeveSet,Stripped),
        find_missing(Stripped,Skipped).





strip_headers([],[]).
strip_headers([H|T],[S|T2]) :-
        midstring(H,'v',R),
        remove_padding(R,A),
        convert_to_num(A,S),
	strip_headers(T,T2).



find_missing(L,L1) :-
        sort(L,Int),
	find_missing(Int,[],L1).





find_missing([],A,A).
find_missing([_],A,A).
find_missing([H1,H2|T],Acc,Missing) :-
        ( H2 is H1 + 1 ->
	        find_missing([H2|T],Acc,Missing)
	;
	        M is H1 + 1,
		append(Acc,[M],NewAcc),
		find_missing([M,H2|T],NewAcc,Missing)
	).










output_missing(File,MissingMas,MissingPas,Blanks,MissingSleeves,Skipped) :-
	open(File,write,Stream),
	format(Stream,'% mas present in originals not in the consolidated inventory~n~n',[]),
	write_list(Stream,MissingMas),
	format(Stream,'~n~n~n% pas present in originals not in the consolidated inventory~n~n',[]),
	write_list(Stream,MissingPas),
	format(Stream,'~n~n~n% missing parents in the consolidated inventory~n~n',[]),
	write_list(Stream,Blanks),
	format(Stream,'~n~n~n% missing sleeves in the consolidated inventory~n~n',[]),
	write_list(Stream,MissingSleeves),
	format(Stream,'~n~n~n% skipped sleeves in the consolidated inventory~n~n',[]),
	write_list(Stream,Skipped),
	close(Stream).















% every ma should be present once in line, family, and inventory facts
% every pa should be present at least once in those facts
%
% Kazic, 8.5.08


