#+title: Posting Demeter from Quintus Prolog to SWI Prolog
#+date: <2018-03-26 Mon>
#+author: Toni Kazic


* preliminaries and data compilation

Installed SWIpl using the dmg; also installed XQuartz-2.7.1 to play with
the GUI.  That's not worth the bother, but maybe I should go ahead and
install a proper prolog mode for emacs . . . 



#+BEGIN_SRC copy quintus version and make sure swipl installed. <2018-03-26 Mon>
$ cd /Volumes/purple/me/c/maize/
$ cp -pR demeter quidemeter
$ pwd
/Volumes/purple/me/c/maize/demeter


$ swipl
Welcome to SWI-Prolog (threaded, 64 bits, version 7.6.4)
SWI-Prolog comes with ABSOLUTELY NO WARRANTY. This is free software.
Please run ?- license. for legal details.

For online help and background, visit http://www.swi-prolog.org
For built-in help, use ?- help(Topic). or ?- apropos(Word).

#+END_SRC


#+begin_src prolog clean up the facts, worry about adding new ones later <2018-03-26 Mon>

?- ['data/load_data'].
Warning: /Volumes/purple/me/c/maize/demeter/data/genotype.pl:1212:
	Clauses of load_data:genotype/11 are not together in the source-file
	  Earlier definition at /Volumes/purple/me/c/maize/demeter/data/genotype.pl:228
	  Current predicate: load_data:genotype/10
	  Use :- discontiguous load_data:genotype/11. to suppress this message
ERROR: /Volumes/purple/me/c/maize/demeter/data/genotype.pl:3672:105: Syntax error: Undefined character escape in quoted atom or string: `\%'
ERROR: /Volumes/purple/me/c/maize/demeter/data/genotype.pl:3674:107: Syntax error: Undefined character escape in quoted atom or string: `\%'
ERROR: /Volumes/purple/me/c/maize/demeter/data/genotype.pl:3680:123: Syntax error: Undefined character escape in quoted atom or string: `\%'
ERROR: /Volumes/purple/me/c/maize/demeter/data/genotype.pl:5855:1: Syntax error: End of file in quoted atom
ERROR: /Volumes/purple/me/c/maize/demeter/data/plan.pl:2743:128: Syntax error: Undefined character escape in quoted atom or string: `\%'
ERROR: /Volumes/purple/me/c/maize/demeter/data/plan.pl:2744:130: Syntax error: Undefined character escape in quoted atom or string: `\%'
ERROR: /Volumes/purple/me/c/maize/demeter/data/plan.pl:2747:146: Syntax error: Undefined character escape in quoted atom or string: `\%'
true.




% fixed stuff . . . 

?- [load_data].
true.


% only the gui gives the usual echo . . . 


%  box compiled into load_data 0.01 sec, 191 clauses
%  contaminant compiled into load_data 0.00 sec, 12 clauses
%  crop compiled into load_data 0.00 sec, 66 clauses
%  crop_rowplant compiled into load_data 3.19 sec, 79,950 clauses
%  cross compiled into load_data 0.48 sec, 7,374 clauses
%  cross_prep compiled into load_data 1.67 sec, 25,987 clauses
%  current_crop compiled into load_data 0.00 sec, 1 clauses
%  current_inbred compiled into load_data 0.00 sec, 104 clauses
%  drying compiled into load_data 0.00 sec, 9 clauses
%  ear compiled into load_data 0.00 sec, 7 clauses
%  failed_pollinatn compiled into load_data 0.01 sec, 239 clauses
%  family_prefix compiled into load_data 0.00 sec, 26 clauses
%  first_extra_tag compiled into load_data 0.05 sec, 851 clauses
%  fun_corn compiled into load_data 0.00 sec, 1 clauses
%  gene_type compiled into load_data 0.01 sec, 135 clauses
%  genotype compiled into load_data 0.23 sec, 3,980 clauses
%  harvest compiled into load_data 0.34 sec, 5,621 clauses
%  idea compiled into load_data 0.01 sec, 125 clauses
%  image compiled into load_data 0.29 sec, 4,492 clauses
%  inbred_pool compiled into load_data 0.01 sec, 4 clauses
%  inventory compiled into load_data 0.45 sec, 7,298 clauses
%  mistagged compiled into load_data 0.00 sec, 5 clauses
%  mutant compiled into load_data 1.80 sec, 24,366 clauses
%  num_secs compiled into load_data 0.00 sec, 8 clauses
%  packed_packet compiled into load_data 0.32 sec, 5,373 clauses
%  pedigree_tree compiled into load_data 0.00 sec, 12 clauses
%  people compiled into load_data 0.00 sec, 20 clauses
%  phenotypic_class compiled into load_data 0.00 sec, 88 clauses
%  plan compiled into load_data 0.19 sec, 3,524 clauses
%  plant compiled into load_data 0.08 sec, 1,946 clauses
%  plant_anatomy compiled into load_data 0.31 sec, 4,561 clauses
%  plant_fate compiled into load_data 0.04 sec, 799 clauses
%  planted compiled into load_data 0.37 sec, 6,231 clauses
%  planting_index compiled into load_data 0.22 sec, 5,670 clauses
%  pot compiled into load_data 0.00 sec, 115 clauses
%  priority_rows compiled into load_data 0.01 sec, 7 clauses
%  row_members compiled into load_data 0.62 sec, 5,742 clauses
%  row_status compiled into load_data 0.50 sec, 6,160 clauses
%  sec_in_days compiled into load_data 0.00 sec, 4 clauses
%  source compiled into load_data 0.02 sec, 312 clauses
%  tassel compiled into load_data 0.08 sec, 1,407 clauses
% /Volumes/purple/me/c/maize/demeter/data/load_data.pl compiled into load_data 11.33 sec, 42 clauses

#+end_src



* GNG porting prolog code

** preliminary impressions <2018-03-29 Thu>

There is now a string library (hooray), so the main problems I'm likely to
encounter are:
   + hidden altered semantics or syntax for predicates;
   + different library contents

Looks like modules and ensure_loaded/1 are consistent with Quintus Prolog.


So far everything is looking good.  Most of the Quintus libraries are SWI
built-ins; sometimes the functor names have changed; and mostly the
semantics seems all consistent.  Testing changed predicates as I go, and
writing a little new code, but will defer major tests until everything
compiles without complaints.



** DONE manage paths better among demeter, agora, moirai, and bnd <2018-03-26 Mon>

Each system remains independent, but now gets its local root.  And
sub_atom/3 is nifty and saves a lot of conversion!


** DONE load_data/0 is fine


** DONE create [[file:code/demeter_utilities.pl][demeter_utilities.pl]] <2018-03-28 Wed> -- <2018-04-15 Sun>


Have written [[file:code/demeter_utilities.pl][demeter_utilities]] to simplify porting.  The idea is that
eventually these predicates should be common to all projects (Moirai, Agora,
Demeter) and supply a common set of utilities to all of them,
superseding agora_utilities.pl and nutil.pl.  So the name and location
right now are misnomers.


I had to write a lazy version of Quintus subseq/3 (lp_subseq/3) that works
in just one direction only.  Also a remove_duplicates/3, since subtract/3
does not behave as I expect --- perhaps there is an internal call to sort/2
that removes the duplicates I want to retain.  Looking at the latter, I
could have probably just used the former!



** GNG revise [[file:code/genetic_utilities.pl][genetic_utilities]] as needed by [[file:code/crop_management.pl][crop_management]] and other code <2018-04-15 Sun>

Still (<2018-04-11 Wed>) going, working my way through
[[file:code/genetic_utilities.pl][genetic_utilities.pl]].  Taking the opportunity to revise code as I go along.
This is turning into a wholesale revision of [[file:code/genetic_utilities.pl][genetic_utilities.pl]], checking
code along the way.  Testing each predicate as I go.  Just made a saved
state of the data to speed up its loading (see Section [[savedst]]).



Tonight <2018-04-15 Sun> finished [[file:/code/demeter_utilities.pl][genetic_utilities.pl]], without checking
the indexing predicates (but shifted calls to the swipl predicates).  I
have to test these anyway in the process of adding in the data to compute
the pedigrees, so will do that then.  The rest of the code tested and
sound.


Now <2018-04-26 Thu> need to work on the indexing predicates.



** TODO revise pedigrees.pl <2018-04-15 Sun> -- 

This is up next, as I must compute the pedigrees to plan the crop.  It went
through many revisions and I need to clean up and test everything.  Pretty
scary to read the comments.


Will compare newly computed to old pedigrees using previous perl code.
There is a problem with running the old perl code under perl 5.26 . . . may
need to fix all that first.


Must incorporate new data, but will revise prolog code first.

*** new saved state <2018-05-01 Tue>

Removed some junk: details in [[file:data/update.org][update.org]] and [[file:../data/palm/raw_data_from_palms/get_into_demeter.org][get_into_demeter.org]].  Still
more data cleaning to do.



** GNG revising [[file:code/crop_management.pl][crop_management]] and when needed, facts it calls.  

These revisions (and shifting code from other code files to
[[file:/code/demeter_utilities.pl][genetic_utilities.pl]] to untangle cross-module calls) are tested as made.
But I haven't yet gone through  [[file:code/crop_management.pl][crop_management]] line-by-line and checked
and tested.

Added in crop, inbred, etc facts.



* DONE Perl data conversion interlude <2018-04-17 Tue> -- <2018-04-26 Thu>


Well, to test the indexing predicates I must have data to index.  And I
have data I have to add into demeter --- tracking this in [[file:data/update.org][update.org]].


So I have started revising the Perl code base as well.  This is in three
locations:
   + ../c/maize/label_making
   + ../c/maize/data/data_conversion
   + ../c/maize/crops

Testing this as I go, but this will go on through the summer.  



Main changes are:

** shift to current perl: 

#+begin_src perl
#!/opt/perl5/perls/perl-5.26.1/bin/perl
#+end_src


** revised file identification lines to be root-independent:

#+BEGIN_SRC 
# this is ../c/maize/label_making/Typesetting/DefaultOrgztn.pm
#+END_SRC



** add new comment:


#+BEGIN_SRC 

# converted to run in perl 5.26
#
# Kazic, 24.4.2018


#+END_SRC



** have it natter:

#+begin_src perl
use strict;
use warnings;
#+end_src



** ensure libraries correctly quoted:

#+begin_src perl
use lib '../../label_making/Typesetting/';      or   use lib './Typesetting/';
use DefaultOrgztn;
use OrganizeData;
use MaizeRegEx;
use NoteExpsn;
use ConvertPalmData;
#+end_src


** declare the bloody variables

#+begin_src perl  examples
my $input_file = $ARGV[0];
my $out_file = $ARGV[1];
my $flag = $ARGV[2];

my $file = $demeter_dir . "planted.pl";


my $out;
my @lines;

for ( my $i = $#lines; $i >= 1;  $i-- ) {

my ($packet,$row,$datetime,$ft,$observer) = $lines[$i] =~ /\"?(${packet_re})\"?,\"?(${row_re})\"?,\"?(${datetime_re})\"?,\"?(${ft_re})\"?,\"?(${observer_re})\"?,/;
#+end_src




** added a flag to toggle printing to various destinations and moving the processed files

#+BEGIN_SRC 

my $flag = $ARGV[2];


...

	if ( $flag eq 'go' ) {
                open $out, '>>', $out_file or die "can't open $out_file\n";
                print $out "\n\n\n\n% data added from ../../data$input_file on $now\n% by data/data_conversion/convert_cross_data.perl\n% called from data/data_conversion/convert_data.perl\n\n";
	        }


...


                if ( $flag eq 'test' ) { print "cross('$ma','$pa',$ear,$repeat,$bee,$pilot,$date,$time).\n"; }
                elsif ( $flag eq 'q' ) { }  # do nothing
		elsif ( $flag eq 'go' ) { print $out "cross('$ma','$pa',$ear,$repeat,$bee,$pilot,$date,$time).\n"; }


...



# thanks, Gabor!
# https://perlmaven.com/how-to-exit-from-perl-script

	if ( ( $flag eq 'test' ) || ( $flag eq 'q' ) ) { exit 42; }

#+END_SRC



** shift to better ins and outs:

#+begin_src perl examples
open my $in, '<', $input_file or die "sorry, can't open input file $input_file\n";
open my $out, '>>', $out_file or die "can't open $out_file\n";
open TAG, '>', $output or die "can't open $output\n";
#+end_src


** shift filehandles to variables from the old upper case
     (except for filehandle references, kept the old way for now):

#+begin_src perl
print $out "planted($row,$packet,$ft,$observer,$date,$time,full,'$crop').\n";
#+end_src





** evaluate array in order

#+begin_src perl

        for ( my $i = 1; $i <= $#lines; $i++ ) {

#+end_src


** add check for useless fields

#+BEGIN_SRC 

	        if ( $_ !~ /^,/ ) {

or


                if ( $lines[$i] !~ /^,/ ) { 


# do regex on data lines

#+END_SRC


** simplified data entry by permitting other formats/locations
   + especially, datetime stamps --- but still prefere proper 24 hour time
   + fold bug score into other phenotypes as a raw digit
   + included a few more sanity checks on the data, can always add more
   + direct conversion of inches to cm


** simplified processing workflow: 

   + call: q -> test -> go
   + file: raw -> unmarked -> done


** shift export statements in ../label_making/Typesetting modules (but
     no other data declarations, since they're covered by the 'our'):

#+begin_src perl
use MaizeRegEx;




use Exporter;

our @ISA = qw(Exporter);
our @EXPORT = qw($crop
             $demeter_dir
             ...
#+end_src





* GNG data cleanup! <2018-04-21 Sat> --

** GNG processing data: most of 17r harvest facts missing <2018-04-29 Sun>

ok, dug around and have [[file:data/update.org][everything that needs to be added]] ready to go,
except for some 16r and 17r image and tissue_collection files with crappy
barcodes.  These require looking at the images, so will do Monday at
work.

Back to fixing [[file:../data/data_conversion\][*perl]] scripts.


<2018-04-26 Thu>: all 16r and 17r data processed and entered!  Major
hiccups:
    + funky barcodes in image and tissue collection:  images fixable,
      sometimes tissue collection is too, but lost a few lines and don't
      like it!
    + extra sample column in mutant.csv


<2018-05-13 Sun>:
Boys are re-collecting 16r inventory, 17r harvest, and 16r and 17r sleeve
boundary data.  Some 16r packets were mis-filed and :josh: filed them
without recollecting their inventory information . . . after they had
collected the sleeve boundary data.  And it was simpler to re-collect all
the 17r harvest data, since most of them were missing.  Had to buy new
kdc200i scanners to make sure this would go better.

Will comment out/remove old versions of the data once we have these facts
in. Using Dropbox to sync across all devices and computers, but will
manually cp the data from Dropbox to the maize tree.  Feels like a good
idea to have a layer of insulation between the daily data and their
permanent record, since deletions are synced across.


** GNG handling remaining ancillary data

lots of checking and merging with files that use current workflow: details
in [[file:data/update.org][update.org]] and [[file:../data/palm/raw_data_from_palms/get_into_demeter.org][get_into_demeter.org]]. 



** DONE fixing 06r inbred numerical genotypes <2018-05-02 Wed>

see [[file;data/update.org][update.org]] for details.




** DONE reconstructing 16r missing data <2018-05-03 Thu> -- <2018-05-13 Sun>

*** the problem --- some of :avi:'s data lost

I was debugging [[file:genetic_utilities.pl][genetic_utilities:make_crop_row_plant/1]], and it kept
saying:

#+BEGIN_SRC prolog no record planting row 1 in 16r

   Call: (10) load_data:planted(r00001, _740, _742, _744, _746, _748, _750, '16R') ? s
   Fail: (10) load_data:planted(r00001, _740, _742, _744, _746, _748, _750, '16R') ? a


#+END_SRC


That is, no planting record for row 1 of 16r.  It would go off into outer
space and crash after a stack overflow.


Well, not good.  Nothing wrong with the code per se, but it turns out we
don't have all the data in demeter!  Avi and I packed the mutants and
somehow he did not upload his data, or they were uploaded and lost because
they didn't go into the directory tree properly.  The only records I have
are from eta.  I doubt they're still on the ipad.



But the other problem was that I had saved space for Candy Gardner's corn,
and it kept not coming.  I also planted an elite line in the first 5 rows
(see [[file:../crops/16r/planning/packing_plan.org][packing_plan.org]] and related files).  So I ended up filling in rows
6--10 with more inbreds and then I made a second set of packet labels when
Candy's corn came ([[file:../crops/16r/tags/second_plnting.csv.tex][second_plnting.csv.tex]]).



Sure enough, when I grep and order by rows and packets, I'm missing nearly
all the inbreds (:avi: packed these) and about half the mutants.  I do have
the packet labels ([[file:../crops/16r/tags/mutants_to_pack_labels.tex][mutants_to_pack_labels.tex]]), but haven't grepped yet to
check if all packets are represented.



*** basic strategy: reconstruct the missing data from the plant tags' barcodes (easier than grepping *tags.tex)

Well, what to do?  Well, we did tag the plants, except for the elite corn
in rows 1--5 ;-).


#+BEGIN_SRC sorting out what we had <2018-05-03 Thu>

# make a list of all rows planted and packets packed in 16r for
# which we have data in demeter

  794  cd maize/demeter/data/
  795  grep 16R planted.pl > 16r_planted
  796  grep 2016 packed_packet.pl > 16r_packed


# on lewis, get the list of barcodes generated for all the tags

 1023  cd barcodes/
 1025  cd 16r
 1028  ls > ../../demeter/data/16r_barcodes
 1029  cd ../../demeter/data/


#  pull these down locally

  800  cd ../../../demeter/data/
  801  scp -p kazict@lewis:/gprs/pithos/c/maize/demeter/data/16r_barcodes .
  802  grep p 16r_barcodes > 16r_packet_list
  803  grep -v p 16r_barcodes > 16r_plant_tags
  804  sort 16r_rows > sorted
  805  uniq sorted > 16r_rows 


#+END_SRC


Now it turns out that there was an error in some of the family numbers for
Candy's corn --- xxx0 instead of 0xxx.  I'll have to check the cross,
cross_prep, harvest, and inventory records on those, and possibly generate
new harvest tags for those seed packets.


*** what's the best way to implement this?

Relying on [[file:../crops/16r/planning/packing_plan.org][packing_plan.org]] and the various grepped files.  Intermediate
results are here and in the reconstructed files.

#+BEGIN_SRC intermediate files

bash-3.2$ pwd
/Users/toni/me/c/maize/demeter/data
bash-3.2$ ls 16r*
16r_barcodes			16r_planted~
16r_barcodes~			16r_reconstructed_packed
16r_packed			16r_reconstructed_packed~
16r_packed~			16r_reconstructed_planted
16r_packet_list			16r_rows
16r_plant_tags			16r_rows~
16r_planted


#+END_SRC



**** packets and rows for elite line: 5 p01200 <2018-05-03 Thu>

#+BEGIN_SRC no packet p01200 ever

bash-3.2$ grep p01200 packed_packet.pl

#+END_SRC

#+BEGIN_SRC prolog

% elites

packed_packet(p01200,'16R890:L0xxxxxx','16R890:L0xxxxxx',60,avi,date(24,05,2016),time(12,00,00)).
packed_packet(p01200,'16R890:L0xxxxxx','16R890:L0xxxxxx',60,avi,date(24,05,2016),time(12,00,00)).
packed_packet(p01200,'16R890:L0xxxxxx','16R890:L0xxxxxx',60,avi,date(24,05,2016),time(12,00,00)).
packed_packet(p01200,'16R890:L0xxxxxx','16R890:L0xxxxxx',60,avi,date(24,05,2016),time(12,00,00)).
packed_packet(p01200,'16R890:L0xxxxxx','16R890:L0xxxxxx',60,avi,date(24,05,2016),time(12,00,00)).


planted(r00001,p01200,20,avi,date(25,05,2016),time(12,00,00),full,'16R').
planted(r00002,p01200,20,avi,date(25,05,2016),time(12,00,00),full,'16R').
planted(r00003,p01200,20,avi,date(25,05,2016),time(12,00,00),full,'16R').
planted(r00004,p01200,20,avi,date(25,05,2016),time(12,00,00),full,'16R').
planted(r00005,p01200,20,avi,date(25,05,2016),time(12,00,00),full,'16R').

#+END_SRC



**** 6 packets for S, 7 for W, 4 for M, 6 for B: no extra planted facts needed <2018-05-04 Fri>

#+BEGIN_SRC how many packed_packet facts are needed?

bash-3.2$ grep S 16r_rows
16R205:S00006
16R205:S00011
16R205:S00012
16R205:S00013
16R205:S00026
16R205:S00027
bash-3.2$  grep 2016 packed_packet.pl | grep p00001 | wc
       0       0       0



bash-3.2$ grep W 16r_rows
16R305:W00007
16R305:W00014
16R305:W00015
16R305:W00016
16R305:W00028
16R305:W00029
16R305:W00030

bash-3.2$ grep 2016 packed_packet.pl | grep p00002 | wc
       0       0       0
bash-3.2$ grep W 16r_rows | wc
       7       7      98


bash-3.2$ grep M 16r_rows | wc
      11      11     154

bash-3.2$ grep 2016 packed_packet.pl | grep p00003 | wc
       7       7     693


bash-3.2$ grep B 16r_rows | wc
       6       6      84
bash-3.2$ grep 2016 packed_packet.pl | grep p00004 | wc
       0       0       0


#+END_SRC


#+BEGIN_SRC prolog inbred packed packet facts

packed_packet(p00001,'09R201:S0xxxxxx','09R201:S0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00001,'09R201:S0xxxxxx','09R201:S0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00001,'09R201:S0xxxxxx','09R201:S0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00001,'09R201:S0xxxxxx','09R201:S0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00001,'09R201:S0xxxxxx','09R201:S0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00001,'09R201:S0xxxxxx','09R201:S0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).

packed_packet(p00002,'09R301:W0xxxxxx','09R301:W0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00002,'09R301:W0xxxxxx','09R301:W0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00002,'09R301:W0xxxxxx','09R301:W0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00002,'09R301:W0xxxxxx','09R301:W0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00002,'09R301:W0xxxxxx','09R301:W0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00002,'09R301:W0xxxxxx','09R301:W0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00002,'09R301:W0xxxxxx','09R301:W0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).


packed_packet(p00003,'09R401:M0xxxxxx','09R401:M0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00003,'09R401:M0xxxxxx','09R401:M0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00003,'09R401:M0xxxxxx','09R401:M0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00003,'09R401:M0xxxxxx','09R401:M0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).

packed_packet(p00004,'13R504:B0xxxxxx','13R504:B0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00004,'13R504:B0xxxxxx','13R504:B0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00004,'13R504:B0xxxxxx','13R504:B0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00004,'13R504:B0xxxxxx','13R504:B0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00004,'13R504:B0xxxxxx','13R504:B0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).
packed_packet(p00004,'13R504:B0xxxxxx','13R504:B0xxxxxx',20,avi,date(20,05,2016),time(12,00,00)).

#+END_SRC


#+BEGIN_SRC existing inbred planted facts after addition elite rows <2018-05-04 Fri>

# sorted by row

bash-3.2$ grep 16R planted.pl
planted(r00001,p01200,20,avi,date(25,05,2016),time(12,00,00),full,'16R').
planted(r00002,p01200,20,avi,date(25,05,2016),time(12,00,00),full,'16R').
planted(r00003,p01200,20,avi,date(25,05,2016),time(12,00,00),full,'16R').
planted(r00004,p01200,20,avi,date(25,05,2016),time(12,00,00),full,'16R').
planted(r00005,p01200,20,avi,date(25,05,2016),time(12,00,00),full,'16R').
planted(r00006,p00001,20,toni,date(29,05,2016),time(17,33,19),full,'16R').
planted(r00007,p00002,20,toni,date(29,05,2016),time(17,35,27),full,'16R').
planted(r00008,p00003,20,toni,date(29,05,2016),time(17,37,30),full,'16R').
planted(r00009,p00004,20,toni,date(29,05,2016),time(17,39,28),full,'16R').
planted(r00010,p00004,20,toni,date(29,05,2016),time(17,41,40),full,'16R').
planted(r00011,p00001,20,avi,date(25,05,2016),time(10,18,44),full,'16R').
planted(r00012,p00001,20,avi,date(25,05,2016),time(10,21,23),full,'16R').
planted(r00013,p00001,20,avi,date(25,05,2016),time(10,22,46),full,'16R').
planted(r00014,p00002,20,avi,date(25,05,2016),time(10,23,54),full,'16R').
planted(r00015,p00002,20,avi,date(25,05,2016),time(10,25,19),full,'16R').
planted(r00016,p00002,20,avi,date(25,05,2016),time(10,26,34),full,'16R').
planted(r00017,p00003,20,avi,date(25,05,2016),time(10,27,47),full,'16R').
planted(r00018,p00003,20,avi,date(25,05,2016),time(10,29,08),full,'16R').
planted(r00019,p00003,20,avi,date(25,05,2016),time(10,30,25),full,'16R').
planted(r00020,p00003,20,avi,date(25,05,2016),time(10,31,38),full,'16R').
planted(r00021,p00003,20,avi,date(25,05,2016),time(10,33,00),full,'16R').
planted(r00022,p00003,20,avi,date(25,05,2016),time(10,34,30),full,'16R').
planted(r00023,p00003,20,avi,date(25,05,2016),time(10,35,30),full,'16R').
planted(r00024,p00004,20,avi,date(25,05,2016),time(10,37,20),full,'16R').
planted(r00025,p00004,20,avi,date(25,05,2016),time(10,38,31),full,'16R').
planted(r00026,p00001,20,toni,date(29,05,2016),time(17,44,26),full,'16R').
planted(r00027,p00001,20,toni,date(29,05,2016),time(17,46,40),full,'16R').
planted(r00028,p00002,20,toni,date(29,05,2016),time(17,48,52),full,'16R').
planted(r00029,p00002,20,toni,date(29,05,2016),time(17,51,04),full,'16R').
planted(r00030,p00002,20,toni,date(29,05,2016),time(17,53,16),full,'16R').
planted(r00031,p00003,20,toni,date(29,05,2016),time(17,55,10),full,'16R').
planted(r00032,p00003,20,toni,date(29,05,2016),time(17,57,36),full,'16R').
planted(r00033,p00003,20,toni,date(29,05,2016),time(17,59,46),full,'16R').
planted(r00034,p00004,20,toni,date(29,05,2016),time(18,01,55),full,'16R').
planted(r00035,p00004,20,toni,date(29,05,2016),time(18,07,10),full,'16R').


#+END_SRC




**** going around in circles for our mutants


***** finding packing facts missing from packed_packet <2018-05-03 Thu>

After fiddling with the grep, this is clean:

#+BEGIN_SRC 
bash-3.2$ grep 2016 packed_packet.pl | grep -v p0000 | grep -v '%' | grep -v I2016 > 16r_packed_mutants
#+END_SRC

I sorted the packets in that file, then cut and pasted the packets into
[[file:data/16r_packed_packet_list][16r_packed_packet_list]].  The list of packets from the barcodes is
[[file:data/16r_packet_list][16r_packet_list]].


These results are a superset of [[match_up_table]] below, but omit the packets
in [[planted_packets_without_packed_packet_facts]].  But there is something
funny, because there is a p00003 packet that shouldn't be there . . . and
what are those packets between p00004 and p00010???

So I don't trust these results!

#+BEGIN_SRC diff to find packets missing from packed_packet <2018-05-03 Thu>

bash-3.2$ diff 16r_packet_list 16r_packed_packet_list 

# the lines beginning with < are missing in packed_packet.pl
# (confirmed by manual inspection)

1,74d0
< p00003
< p00005
< p00006
< p00007
< p00008
< p00009
< p00010
< p00011
< p00012
< p00013
< p00014
< p00015
< p00016
< p00017
< p00018
< p00019
< p00020
< p00021
< p00022
< p00023
< p00024
< p00025
< p00026
< p00027
< p00028
< p00029
< p00030
< p00031
< p00032
< p00033
< p00034
< p00035
< p00036
< p00037
< p00038
< p00039
< p00040
< p00041
< p00042
< p00043
< p00044
< p00045
< p00046
< p00047
< p00048
< p00049
< p00050
< p00051
< p00052
< p00053
< p00054
< p00055
< p00056
< p00057
< p00061
< p00062
< p00064
< p00066
< p00119
< p00120
< p00121
< p00122
< p00123
< p00124
< p00125
< p00126
< p00127
< p01000
< p01001
< p01002
< p01003
< p01004
< p01005
< p01006
76,81d1
< p01008
< p01009
< p01010
< p01011
< p01012
< p01013
104,117d23
< p01036
< p01037
< p01038
< p01039
< p01040
< p01041
< p01042
< p01043
< p01044
< p01045
< p01046
< p01047
< p01048
< p01049
119d24
< p01051
199,214d103
< p01132
< p01133
< p01134
< p01135
< p01136
< p01137
< p01138
< p01139
< p01140
< p01141
< p01142
< p01143
< p01144
< p01145
< p01146
< p01147


#+END_SRC

After fiddling with grep:

#+BEGIN_SRC we don't have all the packing labels <2018-05-03 Thu>
grep scalebox ../../crops/16r/tags/mutants_to_pack_labels.tex > 16r_packet_labels
#+END_SRC

But no, mutant packets < p01000 are missing.  They're not in the
[[file:../crops/16r/tags/second_plnting.csv.tex][second planting file]], either.



Well, I think the thing to do is reconstruct what packets I can from the
grep results; and then fill in the missing ones and the rows from the plant
tags and [[file:../crops/16r/planning/packing_plan.org][packing_plan.org]] and [[file:../crops/16r/planning/sequenced.packing_plan.pl][sequenced.packing_plan.pl]] files.  This will
let me check that the reconstructed ones are correct.  Bogus packets will
start at p01201.


Sure not as good as contemporaneous data.  About as good as the average
geneticist . . . harumph.  Hooray for databases that catch errors!


#+BEGIN_SRC 
grep packing_plan ../../crops/16r/planning/sequenced.packing_plan.pl | grep -v '%' | grep -v xxxxx | grep -v elite > 16r_sequenced_packing_plan
#+END_SRC

Hand-editing produces [[file:data/16r_proto_planted][16r_proto_planted]], with rows and seed but also
parents and other stuff.


[[file:data/16r_mutant_rows][16r_mutant_rows]] is [[file:data/16r_rows][16r_rows]] with inbreds and elites removed (derived from
the plant tags).  The family numbers there must be matched against the
description in [[file:data/genotype.pl][genotype.pl]], and the parents in [[file:data/16r_proto_planted][16r_proto_planted]] matched
against the parents in [[file:data/genotype.pl][genotype.pl]].

e.g.,

#+BEGIN_EXAMPLE tracing things out --- but relies on 16r_proto_planted, which doesn't have missing rows! <2018-05-03 Thu>

# 16r_mutant_rows
16R4460:00036

# genotype.pl
genotype(4460,205,'12N205:S0041906',3738,'12N3738:0000804','Mo20W','Mo20W','Mo20W/lls1','Mo20W/lls1',[lls1],'K1702').

# 16r_proto_planted
planted(r00036,'12N205:S0041906 x 12N3738:0000804','K1702','16R',15,10).


# produces, if no prior data:
packed_packet(p0xxxx,'12N205:S0041906','12N3738:0000804',15,avi,date(24,05,2016),time(12,00,00)).
planted(r00036,p0xxxx,10,avi,date(24,05,2016),time(12,00,00),full,'16R').

#+END_EXAMPLE




***** finding missing packing facts by working backwards from planted facts <2018-05-04 Fri>

from the list in section [[planted_after_146]], here are the packet facts from
planted, sorted in order: and alongside, the results, sorted by packetID,
from:

#+BEGIN_SRC 
bash-3.2$ grep ',2016)' packed_packet.pl | grep -v p0000 | grep -v p01200
#+END_SRC


#+name: match_up_table
| p00098 |                                                                                                    |
| p00099 |                                                                                                    |
| p00207 |                                                                                                    |
| p00208 |                                                                                                    |
| p00250 |                                                                                                    |
| p00252 |                                                                                                    |
| p00306 |                                                                                                    |
| p00307 |                                                                                                    |
| p01007 | packed_packet(p01007,'11N205:S0034309','11N3189:0016803',15,toni,date(25,05,2016),time(04,12,14)). |
| p01014 | packed_packet(p01014,'12R405:M0000310','12R3587:0023110',15,toni,date(25,05,2016),time(04,14,01)). |
| p01015 | packed_packet(p01015,'12R405:M0000310','12R3587:0023110',15,toni,date(25,05,2016),time(04,15,15)). |
| p01016 | packed_packet(p01016,'12R405:M0001501','12R3451:0028009',15,toni,date(25,05,2016),time(04,16,53)). |
| p01017 | packed_packet(p01017,'12R405:M0008203','12R3645:0030503',15,toni,date(25,05,2016),time(04,18,32)). |
| p01018 | packed_packet(p01018,'12R405:M0009910','12R3242:0030202',15,toni,date(25,05,2016),time(04,20,25)). |
| p01019 | packed_packet(p01019,'12R405:M0010820','12R3242:0030209',15,toni,date(25,05,2016),time(04,22,09)). |
| p01020 | packed_packet(p01020,'12R405:M0011105','12R3242:0030209',15,toni,date(25,05,2016),time(04,25,18)). |
| p01021 | packed_packet(p01021,'12R405:M0011110','12R3242:0030203',15,toni,date(25,05,2016),time(04,26,51)). |
| p01022 | packed_packet(p01022,'12N205:S0036705','12N3948:0017506',15,toni,date(25,05,2016),time(04,32,36)). |
| p01023 | packed_packet(p01023,'12N205:S0036705','12N3948:0017506',15,toni,date(25,05,2016),time(04,34,06)). |
| p01024 | packed_packet(p01024,'12N205:S0041906','12N3738:0000804',15,toni,date(25,05,2016),time(04,36,34)). |
| p01025 | packed_packet(p01025,'12N305:W0038310','12N3949:0017706',15,toni,date(25,05,2016),time(04,38,32)). |
| p01026 | packed_packet(p01026,'12N305:W0038310','12N3949:0017706',15,toni,date(25,05,2016),time(04,39,35)). |
| p01027 | packed_packet(p01027,'12N305:W0039207','12N3614:0024110',15,toni,date(25,05,2016),time(04,41,09)). |
| p01028 | packed_packet(p01028,'12N305:W0039207','12N3614:0024110',15,toni,date(25,05,2016),time(04,42,04)). |
| p01029 | packed_packet(p01029,'12N405:M0038707','12N4030:0030504',15,toni,date(25,05,2016),time(04,47,45)). |
| p01030 | packed_packet(p01030,'13R205:S0002205','13R4082:0005502',15,toni,date(25,05,2016),time(04,55,32)). |
| p01031 | packed_packet(p01031,'13R205:S0002205','13R4082:0005502',15,toni,date(25,05,2016),time(04,56,25)). |
| p01032 | packed_packet(p01032,'13R305:W0000803','13R3974:0021303',15,toni,date(25,05,2016),time(04,57,55)). |
| p01033 | packed_packet(p01033,'13R405:M0002601','13R4148:0019102',15,toni,date(25,05,2016),time(04,59,39)). |
| p01034 | packed_packet(p01034,'13R405:M0002608','13R4076:0004202',15,toni,date(25,05,2016),time(05,01,10)). |
| p01035 | packed_packet(p01035,'14R205:S0000105','14R4284:0021512',15,toni,date(25,05,2016),time(05,03,33)). |
| p01050 | packed_packet(p01050,'14R405:M0001610','14R4048:0026106',15,toni,date(25,05,2016),time(05,06,58)). |
| p01052 | packed_packet(p01052,'14R405:M0003903','14R4162:0022908',15,toni,date(25,05,2016),time(05,08,41)). |
| p01053 | packed_packet(p01053,'14R405:M0003906','14R4162:0022908',12,toni,date(25,05,2016),time(05,10,16)). |
| p01054 | packed_packet(p01054,'15R4339:0006503','15R4339:0006503',15,toni,date(24,05,2016),time(17,53,05)). |
| p01055 | packed_packet(p01055,'15R4340:0006601','15R4340:0006601',15,toni,date(24,05,2016),time(17,54,56)). |
| p01056 | packed_packet(p01056,'15R4370:0006703','15R4370:0006703',15,toni,date(24,05,2016),time(17,57,23)). |
| p01057 | packed_packet(p01057,'15R4341:0006805','15R4341:0006805',15,toni,date(24,05,2016),time(17,59,09)). |
| p01058 | packed_packet(p01058,'15R4371:0006904','15R4371:0006904',15,toni,date(24,05,2016),time(18,00,21)). |
| p01059 | packed_packet(p01059,'15R4342:0007002','15R4342:0007002',15,toni,date(24,05,2016),time(18,01,29)). |
| p01060 | packed_packet(p01060,'15R4343:0007101','15R4343:0007101',15,toni,date(24,05,2016),time(18,02,36)). |
| p01061 | packed_packet(p01061,'15R4372:0007201','15R4372:0007201',15,toni,date(24,05,2016),time(18,03,38)). |
| p01062 | packed_packet(p01062,'15R4344:0007301','15R4344:0007301',15,toni,date(24,05,2016),time(18,04,55)). |
| p01063 | packed_packet(p01063,'15R4373:0007403','15R4373:0007403',15,toni,date(24,05,2016),time(18,06,23)). |
| p01064 | packed_packet(p01064,'15R4374:0007503','15R4374:0007503',15,toni,date(24,05,2016),time(18,07,33)). |
| p01065 | packed_packet(p01065,'15R4345:0007602','15R4345:0007602',15,toni,date(24,05,2016),time(18,08,36)). |
| p01066 | packed_packet(p01066,'15R4375:0007701','15R4375:0007701',15,toni,date(24,05,2016),time(18,09,43)). |
| p01067 | packed_packet(p01067,'15R4346:0007801','15R4346:0007801',15,toni,date(24,05,2016),time(18,11,02)). |
| p01068 | packed_packet(p01068,'15R4376:0007903','15R4376:0007903',15,toni,date(24,05,2016),time(18,12,10)). |
| p01069 | packed_packet(p01069,'15R4377:0008003','15R4377:0008003',15,toni,date(24,05,2016),time(18,13,22)). |
| p01070 | packed_packet(p01070,'15R205:S0000101','15R4183:0017105',15,toni,date(24,05,2016),time(18,14,57)). |
| p01071 | packed_packet(p01071,'15R205:S0000401','15R4391:0012707',15,toni,date(24,05,2016),time(18,16,26)). |
| p01072 | packed_packet(p01072,'15R205:S0000501','15R4231:0009207',15,toni,date(24,05,2016),time(18,17,44)). |
| p01073 | packed_packet(p01073,'15R205:S0000510','15R4412:0018104',15,toni,date(24,05,2016),time(18,19,54)). |
| p01074 | packed_packet(p01074,'15R205:S0002205','15R0685:0009107',15,toni,date(24,05,2016),time(18,21,20)). |
| p01075 | packed_packet(p01075,'15R205:S0002207','15R0685:0009103',15,toni,date(24,05,2016),time(18,22,33)). |
| p01076 | packed_packet(p01076,'15R205:S0002306','15R4403:0015507',15,toni,date(24,05,2016),time(18,24,38)). |
| p01077 | packed_packet(p01077,'15R205:S0002411','15R0686:0015307',15,toni,date(24,05,2016),time(18,26,28)). |
| p01078 | packed_packet(p01078,'15R205:S0002501','15R4395:0013304',15,toni,date(24,05,2016),time(18,27,49)). |
| p01079 | packed_packet(p01079,'15R205:S0002505','15R0686:0015302',15,toni,date(24,05,2016),time(18,29,20)). |
| p01080 | packed_packet(p01080,'15R205:S0002605','15R4247:0009302',15,toni,date(24,05,2016),time(18,30,29)). |
| p01081 | packed_packet(p01081,'15R305:W0000701','15R4363:0017408',15,toni,date(24,05,2016),time(18,32,06)). |
| p01082 | packed_packet(p01082,'15R305:W0000704','15R4363:0017408',15,toni,date(24,05,2016),time(18,33,43)). |
| p01083 | packed_packet(p01083,'15R305:W0000711','15R4352:0010904',15,toni,date(24,05,2016),time(18,35,18)). |
| p01084 | packed_packet(p01084,'15R305:W0000711','15R4352:0010904',15,toni,date(24,05,2016),time(18,36,41)). |
| p01085 | packed_packet(p01085,'15R305:W0000906','15R4351:0010005',15,toni,date(24,05,2016),time(18,38,04)). |
| p01086 | packed_packet(p01086,'15R305:W0000908','15R4373:0007409',15,toni,date(25,05,2016),time(03,14,22)). |
| p01087 | packed_packet(p01087,'15R305:W0002701','15R4211:0005516',15,toni,date(25,05,2016),time(03,15,59)). |
| p01088 | packed_packet(p01088,'15R305:W0002805','15R0686:0015302',15,toni,date(25,05,2016),time(03,17,48)). |
| p01089 | packed_packet(p01089,'15R305:W0002901','15R4389:0010801',15,toni,date(25,05,2016),time(03,19,25)). |
| p01090 | packed_packet(p01090,'15R305:W0002903','15R4177:0016107',15,toni,date(25,05,2016),time(03,20,48)). |
| p01091 | packed_packet(p01091,'15R305:W0002904','15R3654:0016401',15,toni,date(25,05,2016),time(03,22,11)). |
| p01092 | packed_packet(p01092,'15R305:W0003003','15R4402:0015101',15,toni,date(25,05,2016),time(03,24,38)). |
| p01093 | packed_packet(p01093,'15R305:W0003004','15R2930:0015905',15,toni,date(25,05,2016),time(03,26,06)). |
| p01094 | packed_packet(p01094,'15R305:W0003009','15R4331:0004904',15,toni,date(25,05,2016),time(03,27,39)). |
| p01095 | packed_packet(p01095,'15R305:W0003013','15R4044:0016008',15,toni,date(25,05,2016),time(03,29,04)). |
| p01096 | packed_packet(p01096,'15R305:W0003106','15R0686:0015307',15,toni,date(25,05,2016),time(03,30,44)). |
| p01097 | packed_packet(p01097,'15R305:W0003115','15R0685:0009107',15,toni,date(25,05,2016),time(03,32,14)). |
| p01098 | packed_packet(p01098,'15R305:W0003209','15R0685:0009103',15,toni,date(25,05,2016),time(03,34,00)). |
| p01099 | packed_packet(p01099,'15R405:M0001101','15R4353:0011002',15,toni,date(25,05,2016),time(03,35,28)). |
| p01100 | packed_packet(p01100,'15R405:M0001101','15R4353:0011002',15,toni,date(25,05,2016),time(03,36,53)). |
| p01101 | packed_packet(p01101,'15R405:M0001310','15R4401:0014902',15,toni,date(25,05,2016),time(03,39,04)). |
| p01102 | packed_packet(p01102,'15R405:M0001411','15R4384:0009402',15,toni,date(25,05,2016),time(03,40,39)). |
| p01103 | packed_packet(p01103,'15R405:M0001601','15R0686:0015307',15,toni,date(25,05,2016),time(03,43,36)). |
| p01104 | packed_packet(p01104,'15R405:M0001619','15R1715:0015202',15,toni,date(25,05,2016),time(03,45,47)). |
| p01105 | packed_packet(p01105,'15R405:M0003307','15R2931:0016704',15,toni,date(25,05,2016),time(03,47,35)). |
| p01106 | packed_packet(p01106,'15R405:M0003411','15R0686:0015302',15,toni,date(25,05,2016),time(03,50,18)). |
| p01107 | packed_packet(p01107,'15R405:M0003505','15R0685:0009103',15,toni,date(25,05,2016),time(03,52,02)). |
| p01108 | packed_packet(p01108,'15R405:M0003507','15R0685:0009107',15,toni,date(25,05,2016),time(03,53,53)). |
| p01109 | packed_packet(p01109,'15R405:M0003701','15R1129:0015401',15,toni,date(25,05,2016),time(03,56,05)). |
| p01110 | packed_packet(p01110,'15R405:M0003710','15R4213:0005618',15,toni,date(25,05,2016),time(03,57,38)). |
| p01111 | packed_packet(p01111,'15R405:M0003804','15R4406:0016801',15,toni,date(25,05,2016),time(03,59,02)). |
| p01112 | packed_packet(p01112,'15R405:M0003904','15R3877:0005004',15,toni,date(25,05,2016),time(04,00,57)). |
| p01114 | packed_packet(p01114,'10R305:W0001502','10R1035:0021906',15,toni,date(29,05,2016),time(13,28,28)). |
| p01115 | packed_packet(p01115,'10R305:W0001511','10R1035:0021903',15,toni,date(29,05,2016),time(13,27,36)). |
| p01116 | packed_packet(p01116,'11N305:W0030810','11N3192:0013803',15,toni,date(29,05,2016),time(13,23,45)). |
| p01117 | packed_packet(p01117,'11N305:W0039501','11N3192:0013810',15,toni,date(29,05,2016),time(13,25,26)). |
| p01118 | packed_packet(p01118,'12R205:S0002216','12R3629:0028403',15,toni,date(29,05,2016),time(13,21,32)). |
| p01119 | packed_packet(p01119,'12R205:S0002217','12R3454:0028708',15,toni,date(29,05,2016),time(13,20,16)). |
| p01120 | packed_packet(p01120,'14R205:S0000109','14R4280:0021111',15,toni,date(29,05,2016),time(13,18,30)). |
| p01121 | packed_packet(p01121,'14R205:S0000215','14R4229:0009701',15,toni,date(29,05,2016),time(13,16,51)). |
| p01122 | packed_packet(p01122,'14R205:S0000607','14R4275:0020306',15,toni,date(29,05,2016),time(13,14,55)). |
| p01123 | packed_packet(p01123,'14R305:W0000704','14R4220:0006819',15,toni,date(29,05,2016),time(13,13,24)). |
| p01124 | packed_packet(p01124,'14R305:W0000808','14R3937:0020415',15,toni,date(29,05,2016),time(13,12,06)). |
| p01125 | packed_packet(p01125,'14R405:M0001101','14R4278:0020905',15,toni,date(29,05,2016),time(13,10,18)). |
| p01126 | packed_packet(p01126,'14R405:M0001105','14R4283:0021405',15,toni,date(29,05,2016),time(13,08,24)). |
| p01127 | packed_packet(p01127,'14R405:M0001105','14R4283:0021405',15,toni,date(29,05,2016),time(13,08,06)). |
| p01128 | packed_packet(p01128,'14R405:M0001304','14R4162:0022908',15,toni,date(29,05,2016),time(13,06,13)). |
| p01129 | packed_packet(p01129,'14R405:M0001308','14R4286:0021905',15,toni,date(29,05,2016),time(13,03,26)). |
| p01130 | packed_packet(p01130,'14R405:M0001803','14R4166:0023701',15,toni,date(29,05,2016),time(13,32,55)). |
| p01131 | packed_packet(p01131,'15R405:M0003909','15R4398:0013904',15,toni,date(28,05,2016),time(18,48,35)). |



#+name: planted_packets_without_packed_packet_facts
| p00098 |                                                                                                    |
| p00099 |                                                                                                    |
| p00207 |                                                                                                    |
| p00208 |                                                                                                    |
| p00250 |                                                                                                    |
| p00252 |                                                                                                    |
| p00306 |                                                                                                    |
| p00307 |                                                                                                    |


***** planting --- need facts for second planting rows after 146 but still going in circles
<<planted_after_146>>


Good news: we're missing :avi:'s second planting data, everything after row
146:


#+BEGIN_SRC missing :avi:'s second planting
bash-3.2$ grep 16R planted.pl | grep avi | grep '29,05'
bash-3.2$ 
#+END_SRC



#+BEGIN_SRC these are the planted mutants from contemporaneous facts

# removed inbreds and elites after the grep and sorted by row; and sort by packet as needed

bash-3.2$ grep 16R planted.pl


planted(r00078,p00098,10,toni,date(29,05,2016),time(18,42,11),full,'16R').
planted(r00079,p00099,10,toni,date(29,05,2016),time(18,45,45),full,'16R').
planted(r00068,p00207,10,toni,date(25,05,2016),time(10,48,46),full,'16R').
planted(r00069,p00208,10,toni,date(29,05,2016),time(18,31,02),full,'16R').
planted(r00070,p00250,10,toni,date(29,05,2016),time(18,35,24),full,'16R').
planted(r00087,p00252,10,toni,date(29,05,2016),time(18,55,59),full,'16R').
planted(r00090,p00306,10,toni,date(29,05,2016),time(19,01,14),full,'16R').
planted(r00091,p00307,10,toni,date(29,05,2016),time(19,03,53),full,'16R').
planted(r00115,p01007,10,avi,date(25,05,2016),time(10,46,21),full,'16R').
planted(r00072,p01014,10,toni,date(25,05,2016),time(10,51,59),full,'16R').
planted(r00073,p01015,10,toni,date(29,05,2016),time(18,37,50),full,'16R').
planted(r00110,p01016,10,toni,date(29,05,2016),time(19,29,53),full,'16R').
planted(r00125,p01017,10,avi,date(25,05,2016),time(10,52,15),full,'16R').
planted(r00122,p01018,10,avi,date(25,05,2016),time(10,49,26),full,'16R').
planted(r00123,p01019,10,avi,date(25,05,2016),time(10,50,22),full,'16R').
planted(r00121,p01020,10,avi,date(25,05,2016),time(10,47,54),full,'16R').
planted(r00124,p01021,10,avi,date(25,05,2016),time(10,51,18),full,'16R').
planted(r00074,p01022,10,toni,date(25,05,2016),time(10,53,12),full,'16R').
planted(r00075,p01023,10,toni,date(29,05,2016),time(18,39,43),full,'16R').
planted(r00036,p01024,10,toni,date(25,05,2016),time(10,25,35),full,'16R').
planted(r00076,p01025,10,toni,date(25,05,2016),time(10,54,11),full,'16R').
planted(r00077,p01026,10,toni,date(29,05,2016),time(18,41,48),full,'16R').
planted(r00088,p01027,10,toni,date(25,05,2016),time(11,00,03),full,'16R').
planted(r00089,p01028,10,toni,date(29,05,2016),time(18,59,10),full,'16R').
planted(r00126,p01029,10,avi,date(25,05,2016),time(10,53,22),full,'16R').
planted(r00066,p01030,10,toni,date(25,05,2016),time(10,47,42),full,'16R').
planted(r00067,p01031,10,toni,date(29,05,2016),time(18,28,41),full,'16R').
planted(r00105,p01032,10,avi,date(25,05,2016),time(10,40,52),full,'16R').
planted(r00097,p01033,10,toni,date(25,05,2016),time(11,02,56),full,'16R').
planted(r00094,p01034,10,toni,date(25,05,2016),time(11,01,02),full,'16R').
planted(r00086,p01035,10,toni,date(25,05,2016),time(10,59,04),full,'16R').
planted(r00142,p01050,10,avi,date(25,05,2016),time(10,55,38),full,'16R').
planted(r00113,p01052,10,avi,date(25,05,2016),time(10,44,00),full,'16R').
planted(r00114,p01053,10,avi,date(25,05,2016),time(10,45,07),full,'16R').
planted(r00043,p01054,10,toni,date(25,05,2016),time(10,37,03),full,'16R').
planted(r00044,p01055,10,toni,date(25,05,2016),time(10,37,59),full,'16R').
planted(r00045,p01056,10,toni,date(25,05,2016),time(10,38,54),full,'16R').
planted(r00046,p01057,10,toni,date(25,05,2016),time(10,39,52),full,'16R').
planted(r00047,p01058,10,toni,date(25,05,2016),time(10,40,34),full,'16R').
planted(r00048,p01059,10,toni,date(25,05,2016),time(10,41,31),full,'16R').
planted(r00049,p01060,10,toni,date(25,05,2016),time(10,42,26),full,'16R').
planted(r00050,p01061,10,toni,date(25,05,2016),time(10,43,39),full,'16R').
planted(r00051,p01062,10,toni,date(25,05,2016),time(10,44,34),full,'16R').
planted(r00052,p01063,10,toni,date(25,05,2016),time(10,45,38),full,'16R').
planted(r00054,p01064,10,toni,date(29,05,2016),time(18,07,13),full,'16R').
planted(r00055,p01065,10,toni,date(29,05,2016),time(18,11,02),full,'16R').
planted(r00056,p01066,10,toni,date(29,05,2016),time(18,11,22),full,'16R').
planted(r00057,p01067,10,toni,date(29,05,2016),time(18,14,05),full,'16R').
planted(r00058,p01068,10,toni,date(29,05,2016),time(18,16,11),full,'16R').
planted(r00059,p01069,10,toni,date(29,05,2016),time(18,16,14),full,'16R').
planted(r00143,p01070,10,avi,date(25,05,2016),time(10,56,37),full,'16R').
planted(r00107,p01071,10,avi,date(25,05,2016),time(10,41,42),full,'16R').
planted(r00041,p01072,10,toni,date(25,05,2016),time(10,34,53),full,'16R').
planted(r00146,p01073,10,avi,date(25,05,2016),time(11,00,17),full,'16R').
planted(r00063,p01074,10,toni,date(29,05,2016),time(18,23,45),full,'16R').
planted(r00060,p01075,10,toni,date(29,05,2016),time(18,18,04),full,'16R').
planted(r00134,p01076,10,toni,date(29,05,2016),time(19,54,03),full,'16R').
planted(r00131,p01077,10,toni,date(29,05,2016),time(19,48,22),full,'16R').
planted(r00109,p01078,10,avi,date(25,05,2016),time(10,42,42),full,'16R').
planted(r00128,p01079,10,toni,date(29,05,2016),time(19,43,44),full,'16R').
planted(r00042,p01080,10,toni,date(25,05,2016),time(10,35,47),full,'16R').
planted(r00144,p01081,10,avi,date(25,05,2016),time(10,57,46),full,'16R').
planted(r00145,p01082,10,avi,date(25,05,2016),time(10,59,04),full,'16R').
planted(r00080,p01083,10,toni,date(25,05,2016),time(10,55,48),full,'16R').
planted(r00081,p01084,10,toni,date(29,05,2016),time(18,47,46),full,'16R').
planted(r00095,p01085,10,toni,date(29,05,2016),time(19,11,53),full,'16R').
planted(r00053,p01086,10,toni,date(25,05,2016),time(10,46,35),full,'16R').
planted(r00039,p01087,10,toni,date(25,05,2016),time(10,30,29),full,'16R').
planted(r00129,p01088,10,toni,date(29,05,2016),time(19,45,09),full,'16R').
planted(r00096,p01089,10,toni,date(29,05,2016),time(19,13,27),full,'16R').
planted(r00137,p01090,10,toni,date(29,05,2016),time(19,58,48),full,'16R').
planted(r00138,p01091,10,toni,date(29,05,2016),time(20,00,36),full,'16R').
planted(r00118,p01092,10,avi,date(25,05,2016),time(10,47,03),full,'16R').
planted(r00135,p01093,10,toni,date(29,05,2016),time(19,55,33),full,'16R').
planted(r00037,p01094,10,toni,date(25,05,2016),time(10,27,13),full,'16R').
planted(r00136,p01095,10,toni,date(29,05,2016),time(19,57,08),full,'16R').
planted(r00132,p01096,10,toni,date(29,05,2016),time(19,50,22),full,'16R').
planted(r00064,p01097,10,toni,date(29,05,2016),time(18,24,04),full,'16R').
planted(r00061,p01098,10,toni,date(29,05,2016),time(18,20,37),full,'16R').
planted(r00082,p01099,10,toni,date(25,05,2016),time(10,57,52),full,'16R').
planted(r00083,p01100,10,toni,date(29,05,2016),time(18,49,22),full,'16R').
planted(r00127,p01101,10,avi,date(25,05,2016),time(10,54,21),full,'16R').
planted(r00092,p01102,10,toni,date(29,05,2016),time(19,08,25),full,'16R').
planted(r00133,p01103,10,toni,date(29,05,2016),time(19,52,02),full,'16R').
planted(r00120,p01104,10,toni,date(29,05,2016),time(19,41,59),full,'16R').
planted(r00140,p01105,10,toni,date(29,05,2016),time(20,03,54),full,'16R').
planted(r00130,p01106,10,toni,date(29,05,2016),time(19,46,51),full,'16R').
planted(r00062,p01107,10,toni,date(29,05,2016),time(18,21,11),full,'16R').
planted(r00065,p01108,10,toni,date(29,05,2016),time(18,26,50),full,'16R').
planted(r00139,p01109,10,toni,date(29,05,2016),time(20,02,13),full,'16R').
planted(r00040,p01110,10,toni,date(25,05,2016),time(10,32,39),full,'16R').
planted(r00141,p01111,10,toni,date(29,05,2016),time(20,05,20),full,'16R').
planted(r00038,p01112,10,toni,date(25,05,2016),time(10,30,26),full,'16R').
planted(r00101,p01114,10,toni,date(29,05,2016),time(19,20,02),full,'16R').
planted(r00102,p01115,10,toni,date(29,05,2016),time(19,21,35),full,'16R').
planted(r00104,p01116,10,toni,date(29,05,2016),time(19,25,02),full,'16R').
planted(r00103,p01117,10,toni,date(29,05,2016),time(19,23,26),full,'16R').
planted(r00116,p01118,10,toni,date(29,05,2016),time(19,36,25),full,'16R').
planted(r00117,p01119,10,toni,date(29,05,2016),time(19,38,22),full,'16R').
planted(r00106,p01120,10,toni,date(29,05,2016),time(19,26,39),full,'16R').
planted(r00071,p01121,10,toni,date(29,05,2016),time(18,35,26),full,'16R').
planted(r00098,p01122,10,toni,date(29,05,2016),time(19,15,08),full,'16R').
planted(r00093,p01123,10,toni,date(29,05,2016),time(19,06,34),full,'16R').
planted(r00099,p01124,10,toni,date(29,05,2016),time(19,16,53),full,'16R').
planted(r00100,p01125,10,toni,date(29,05,2016),time(19,18,26),full,'16R').
planted(r00084,p01126,10,toni,date(29,05,2016),time(18,49,41),full,'16R').
planted(r00085,p01127,10,toni,date(29,05,2016),time(18,52,14),full,'16R').
planted(r00112,p01128,10,toni,date(29,05,2016),time(19,34,38),full,'16R').
planted(r00108,p01129,10,toni,date(29,05,2016),time(19,28,07),full,'16R').
planted(r00119,p01130,10,toni,date(29,05,2016),time(19,40,10),full,'16R').
planted(r00111,p01131,10,toni,date(29,05,2016),time(19,31,25),full,'16R').

#+END_SRC

So for those rows we have the right packet id.


Comparing this list to [[file:data/16r_packed_mutants][16r_packed_mutants]] shows we are missing the
following packets:

p00004 > m < p01007 and p01131 < m

p00098
p00099
p00207
p00208
p00250
p00252
p00306
p00307







*** final mutant reconstruction plan <2018-05-04 Fri>


Instead, work from the mutant tags backwards and check for missing data!


#+name: safest_approach  <2018-05-04 Fri>
#+BEGIN_EXAMPLE better approach goes line-by-line through 16r_mutant_rows with multiple comparisons
# 16r_mutant_rows
16R4460:00036

# genotype.pl
genotype(4460,205,'12N205:S0041906',3738,'12N3738:0000804','Mo20W','Mo20W','Mo20W/lls1','Mo20W/lls1',[lls1],'K1702').

# (sequenced.)packing_plan.pl
packing_plan(36,1,['12N205:S0041906 x 12N3738:0000804'],1,[self],'is 3rd; alternate for forebear of family 4057','K1702','16R',15,10).

# packed_packet
packed_packet(p01024,'12N205:S0041906','12N3738:0000804',15,toni,date(25,05,2016),time(04,36,34)).

# planted
# grep p01024 planted.pl | grep '16R'
planted(r00036,p01024,10,toni,date(25,05,2016),time(10,25,35),full,'16R').

#+END_EXAMPLE


Probably it would be best to write a script for this! Well, or a prolog
query!








*** implementing mutant reconstruction plan <2018-05-04 Fri> -- <2018-05-13 Sun>
<<the-fix>>


#+BEGIN_SRC make a fact for data that may be missing <2018-05-04 Fri>
$ cp 16r_rows possibly_missing_data.pl

# removed inbreds and elites by hand, then constructed facts by emacs

% possibly_missing_data(NumGtypeSansPlant,Family,PaddedRow).    

#+END_SRC

then wrote [[file:code/fix_missing_data.pl][fix_missing_data.pl]].  



This took a surprisingly long time --- there were many corner cases that
needed to be considered to reconstruct the dark matter.  I asserted facts
into the database as they were confected, to simplify avoiding their
incorrect re-use.


In the end:

#+BEGIN_SRC prolog final reconstructed 16r facts <2018-05-13 Sun>
bash-3.2$ ../data/saved_data 
Welcome to SWI-Prolog (threaded, 64 bits, version 7.6.4)
SWI-Prolog comes with ABSOLUTELY NO WARRANTY. This is free software.
Please run ?- license. for legal details.

For online help and background, visit http://www.swi-prolog.org
For built-in help, use ?- help(Topic). or ?- apropos(Word).

?- [fix_missing_data].
true.

?- fix_missing_data('16R','../archival/16r_data_reconstructn/16r_reconstructed_facts.pl').
Warning! relying on the genotype for row r00059
Warning! relying on the genotype for row r00107


packed_packet(p00098,'11N405:M0032808','11N3419:0010704',15,faked,date(24,5,2016),time(0,0,0)).
packed_packet(p00099,'11N405:M0032808','11N3419:0010704',15,faked,date(24,5,2016),time(0,0,0)).
packed_packet(p00207,'13R305:W0000702','13R4083:0005603',20,faked,date(24,5,2016),time(0,0,0)).
packed_packet(p00208,'13R305:W0000702','13R4083:0005603',20,faked,date(24,5,2016),time(0,0,0)).
packed_packet(p00252,'14R205:S0000105','14R4284:0021512',15,faked,date(24,5,2016),time(0,0,0)).
packed_packet(p00306,'14R405:M0001103','14R4285:0021603',15,faked,date(24,5,2016),time(0,0,0)).
packed_packet(p00307,'14R405:M0001103','14R4285:0021603',15,faked,date(24,5,2016),time(0,0,0)).
packed_packet(p01069,'15R4377:0008008','15R4377:0008008',15,faked,date(29,5,2016),time(0,0,0)).
packed_packet(p01071,'14R205:S0000401','14R4159:0021808',15,faked,date(24,5,2016),time(0,0,0)).
packed_packet(p02000,'16R0687:0000000','16R0687:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02001,'16R0688:0000000','16R0688:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02002,'16R0689:0000000','16R0689:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02003,'16R0690:0000000','16R0690:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02004,'16R0691:0000000','16R0691:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02005,'16R0692:0000000','16R0692:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02006,'16R0693:0000000','16R0693:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02007,'16R0694:0000000','16R0694:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02008,'16R0695:0000000','16R0695:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02009,'16R0696:0000000','16R0696:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02010,'16R0697:0000000','16R0697:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02011,'16R0698:0000000','16R0698:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02012,'16R0699:0000000','16R0699:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02013,'16R0700:0000000','16R0700:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02014,'16R0701:0000000','16R0701:0000000',15,faked,date(3,6,2016),time(0,0,0)).
packed_packet(p02015,'16R0702:0000000','16R0702:0000000',15,faked,date(3,6,2016),time(0,0,0)).
planted(r00147,p02000,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00148,p02001,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00149,p02002,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00150,p02003,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00151,p02004,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00152,p02005,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00153,p02006,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00154,p02007,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00155,p02008,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00156,p02009,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00157,p02010,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00158,p02011,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00159,p02012,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00160,p02013,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00161,p02014,10,faked,date(3,6,2016),time(0,0,0),full,'16R').
planted(r00162,p02015,10,faked,date(3,6,2016),time(0,0,0),full,'16R').


true 

?- 
#+END_SRC



** GNG ha, my second planting 17r data are missing too! <2018-05-13 Sun>

Need to write a predicate that checks that there's a packed_packet fact for
every planted fact in a given crop . . . that will catch data collection
errors earlier.  Since family numbers can be issued after planting, this
shouldn't depend on genotype facts.

This will be a variation on fix_missing_data:check_packets_vs_planted/7.



*** set up archival directory

#+BEGIN_SRC make the archival directory
cd /gprs/pithos/c/maize/demeter/archival/
mkdir 17r_data_reconstructn
#+END_SRC



*** take care of the inbreds by hand


Hmmmm, inbreds are fastest by hand . . . a predicate to find unplanted
rows: [[file:code/fix_missing_data.pl][fix_missing_data:find_unplanted_rows/3]].

#+BEGIN_SRC prolog
?- find_unplanted_rows('17R',P,U),write_list(U).
Correct to: "demeter_utilities:write_list(U)"? 
gap(32,52) 
gap(58,60) 
gap(60,62) 
gap(62,64) 
gap(64,66) 
gap(66,68) 
gap(68,70) 
gap(70,72) 
gap(72,74) 
gap(74,76) 
gap(76,78) 
gap(78,80) 
gap(80,82) 
gap(82,84) 
gap(84,86) 
gap(86,88) 
gap(88,90) 
gap(90,92) 
gap(92,94) 
gap(94,96) 
gap(96,98) 
gap(98,100) 
gap(100,102) 
gap(102,104) 
gap(104,106) 
gap(106,108) 
gap(108,110) 
gap(144,147) 
gap(150,157) 
gap(161,163) 
gap(190,197) 
gap(197,238) 
P = [r00001, r00002, r00003, r00004, r00005, r00006, r00007, r00008, r00009|...],
U = [gap(32, 52), gap(58, 60), gap(60, 62), gap(62, 64), gap(64, 66), gap(66, 68), gap(68, 70), gap(70, 72), gap(..., ...)|...] 

#+END_SRC


All inbred packed_packet facts are present:

#+BEGIN_SRC counting inbred packets
bash-3.2$ pwd
/Users/toni/me/c/maize/demeter/data

bash-3.2$ grep 17R planted.pl | grep p00001 | wc
      12      12     880
bash-3.2$ grep 17R planted.pl | grep p00002 | wc
      11      11     805
bash-3.2$ grep 17R planted.pl | grep p00003 | wc
      17      17    1236
bash-3.2$ grep 17R planted.pl | grep p00004 | wc
       7       7     512

bash-3.2$ grep 2017 packed_packet.pl | grep p00001 | wc
      12      12    1176
bash-3.2$ grep 2017 packed_packet.pl | grep p00002 | wc
      11      11    1078
bash-3.2$ grep 2017 packed_packet.pl | grep p00003 | wc
      17      17    1666
bash-3.2$ grep 2017 packed_packet.pl | grep p00004 | wc
       7       7     686


#+END_SRC


*** write a perl script to generate the possibly_missing facts <2018-05-16 Wed>

This is [[file:../crops/scripts/make_possibly_missing_data.perl][make_possibly_missing_data.perl]], which uses the filenames in the
barcodes directory of a crop to generate the missing facts after filtering
out inbreds, landraces, and fun corn.  Output is appended to
[[file:data/possibly_missing_data.pl][possibly_missing_data.pl.]]


*** duh, I never issued the genotype facts!  but predicate didn't feel right <2018-05-16 Wed>

So wrote a [[file:code/fix_missing_data::supply_genotypes][predicate]] to do this, generating fgenotype/11.


Ah, but it turns out that 17r had most parents as [Ma,Pa] instead of [Ma x
Pa], which is what the code expects.  So fixed by hand, and fixed the other
errors that changed the predicate's arity when I did that.


But I was still very suspicious of the results --- duplicated fgenotype
entries, not finding the family for row 72, etc.  Part of the problem is
that my second planting facts were lost.


*** so fix it by hand instead <2018-05-16 Wed>

So in the end, I'm doing this by hand.  I'm hampered because lewis is down
and so I can't get to the plant tags file.

I should have made an org file with the family assignments, but it must be
in management . . . and I don't have it locally and can't get to lewis.

#+BEGIN_SRC pull together available data
mkdir ../archival/17r_data_reconstructn

# removed elites and inbreds by hand
grep ',2017),time' packed_packet.pl | grep -v p0000 > ../archival/17r_data_reconstructn/17r_packets
grep ',2017),time' planted.pl | grep -v p0000 > ../archival/17r_data_reconstructn/17r_planted



grep 16R ../../crops/17r/planning/packing_plan.pl  | wc
      88    1135   13778


# separated candy gardner's existing families by hand
grep 16R ../../crops/17r/planning/packing_plan.pl > ../archival/17r_data_reconstructn/17r_new_families
#+END_SRC



Procedure:
   + cp 17r_planted 17r_reconstructed_planted, and insert a dummy fact for
     each missing row

   + look at the 17r_packets and crops/17r/planning/packing_plan.pl, and
     match (make the windows small so that only two lines are visible in each):

      + the row and packet for the immediately preceeding row (the bulks
        were planted in pairs of rows, in the first and second planting)

      + the ma and pa of the packed_packet fact for the packet of the
        preceeding row

      + the packing_plan fact for both rows, confirming identities of both
        sets of parents for the known and following unknown rows

      + insert packet and row into the flanted/8 fact (for easier grepping
        later) 


* making and using a saved state <2018-04-11 Wed> and ff
<<savedst>>


Let's speed up loading the data with a saved state.



** incantation

#+begin_src prolog
bash-3.2$ swipl

% messages ....



?- ['../data/load_data'].
true.

?- [set_demeter_directory].


Demeter search path demeter_tree loaded by Demeter is /Users/toni/me/c/maize/demeter/
true.




?- qsave_program('../data/saved_data').

% messages ....

true.

?- 
#+end_src


** making and using

#+begin_src prolog making the saved state the easiest way
%
% note predicates are already imported from the library 
% (library(qsave)

?- ['../data/load_data.pl'].
true.

?- qsave_program('../data/saved_data').

% bunch of messages ....
true.


#+end_src



#+BEGIN_SRC using the saved state -- just call it from the command line!

$ ../data/saved_data 
Welcome to SWI-Prolog (threaded, 64 bits, version 7.6.4)
SWI-Prolog comes with ABSOLUTELY NO WARRANTY. This is free software.
Please run ?- license. for legal details.

For online help and background, visit http://www.swi-prolog.org
For built-in help, use ?- help(Topic). or ?- apropos(Word).

?- cross(A,B,C,D,E,F,G,H).
A = '07R201:S0028907',
B = '07R2318:0038611',
C = ear(1),
D = false,
E = toni,
F = matt,
G = date(29, 7, 2007),
H = time(9, 51, 47) 

?- halt.

#+END_SRC


** include file search paths

#+begin_rmk <2018-04-12 Thu> :toni:
Revised save state to include the file search paths.
#+end_rmk

#+begin_src prolog fixing the saved state to include file search paths <2018-04-12 Thu>
[set_demeter_directory].

agora_tree search path loaded by The Agora is /Volumes/purple/me/a/the_agora
The Agora is calling Moirai to load the code_tree search path
code_tree search path loaded by Moirai is /Volumes/purple/me/a/moirai



Demeter search path demeter_tree loaded by Demeter is /Volumes/purple/me/c/maize/demeter/
The Agora search path agora_tree loaded by Demeter is /Volumes/purple/me/a/the_agora
Moirai search path code_tree loaded by Demeter is /Volumes/purple/me/a/moirai
BND search path bnd_tree loaded by Demeter is /Volumes/purple/me/a/bnd

true.

?- ['../data/load_data.pl'].
true.

?- qsave_program('../data/saved_data').
% autoloading prolog_codewalk:must_be/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/error
% autoloading prolog_debug:backtrace/1 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_stack
% autoloading prolog_codewalk:portray_clause/1 from /Applications/SWI-Prolog.app/Contents/swipl/library/listing
% autoloading prolog_codewalk:clause_info/4 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_clause
% autoloading prolog_codewalk:initialization_layout/4 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_clause
% autoloading qsave:current_foreign_library/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/shlib
% autoloading oset:reverse/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/lists
% autoloading record:member/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/lists
% autoloading error:assertion/1 from /Applications/SWI-Prolog.app/Contents/swipl/library/debug
% autoloading prolog_codewalk:clause_name/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_clause
% Autoloader: iteration 1 resolved 1 predicates and loaded 10 files in 0.058 seconds.  Restarting ...
% Autoloader: loaded 1 files in 2 iterations in 0.108 seconds
true.

#+end_src




#+begin_src prolog saved state <2018-05-01 Tue>
?- [set_demeter_directory,'../data/load_data'].


Demeter search path demeter_tree loaded by Demeter is /Volumes/purple/me/c/maize/demeter/
true.


?- qsave_program('../data/saved_data').
% autoloading prolog_codewalk:must_be/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/error
% autoloading prolog_debug:backtrace/1 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_stack
% autoloading prolog_codewalk:portray_clause/1 from /Applications/SWI-Prolog.app/Contents/swipl/library/listing
% autoloading prolog_codewalk:clause_info/4 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_clause
% autoloading prolog_codewalk:initialization_layout/4 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_clause
% autoloading qsave:current_foreign_library/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/shlib
% autoloading oset:reverse/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/lists
% autoloading record:member/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/lists
% autoloading error:assertion/1 from /Applications/SWI-Prolog.app/Contents/swipl/library/debug
% autoloading prolog_codewalk:clause_name/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_clause
% Autoloader: iteration 1 resolved 1 predicates and loaded 10 files in 0.060 seconds.  Restarting ...
% Autoloader: loaded 1 files in 2 iterations in 0.114 seconds
true.


#+END_SRC


** saved state updates

*** after commenting out twice-planted rows  <2018-05-02 Wed>

#+begin_src prolog saved state after commenting out planted facts twice-planted rows <2018-05-02 Wed>

bash-3.2$ date
Wed May  2 05:42:37 CDT 2018

bash-3.2$ swipl
Welcome to SWI-Prolog (threaded, 64 bits, version 7.6.4)
SWI-Prolog comes with ABSOLUTELY NO WARRANTY. This is free software.
Please run ?- license. for legal details.

For online help and background, visit http://www.swi-prolog.org
For built-in help, use ?- help(Topic). or ?- apropos(Word).

?- [set_demeter_directory,'../data/load_data'].


Demeter search path demeter_tree loaded by Demeter is /Users/toni/me/c/maize/demeter/
true.


?- qsave_program('../data/saved_data').

% autoloading prolog_codewalk:must_be/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/error
% autoloading prolog_debug:backtrace/1 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_stack
% autoloading prolog_codewalk:portray_clause/1 from /Applications/SWI-Prolog.app/Contents/swipl/library/listing
% autoloading prolog_codewalk:clause_info/4 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_clause
% autoloading prolog_codewalk:initialization_layout/4 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_clause
% autoloading qsave:current_foreign_library/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/shlib
% autoloading oset:reverse/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/lists
% autoloading record:member/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/lists
% autoloading error:assertion/1 from /Applications/SWI-Prolog.app/Contents/swipl/library/debug
% autoloading prolog_codewalk:clause_name/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_clause
% Autoloader: iteration 1 resolved 1 predicates and loaded 10 files in 0.054 seconds.  Restarting ...
% Autoloader: loaded 1 files in 2 iterations in 0.105 seconds
true.

?- halt.

#+end_src





*** after reconstructing missing 16r data <2018-05-13 Sun>


#+begin_src prolog
bash-3.2$ date
Sun May 13 06:52:08 CDT 2018
bash-3.2$ swipl
Welcome to SWI-Prolog (threaded, 64 bits, version 7.6.4)
SWI-Prolog comes with ABSOLUTELY NO WARRANTY. This is free software.
Please run ?- license. for legal details.

For online help and background, visit http://www.swi-prolog.org
For built-in help, use ?- help(Topic). or ?- apropos(Word).

?- ['../data/load_data'].
true.

?- [set_demeter_directory].


Demeter search path demeter_tree loaded by Demeter is /Users/toni/me/c/maize/demeter/
true.

?- qsave_program('../data/saved_data').
% autoloading prolog_codewalk:must_be/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/error
% autoloading prolog_debug:backtrace/1 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_stack
% autoloading prolog_codewalk:portray_clause/1 from /Applications/SWI-Prolog.app/Contents/swipl/library/listing
% autoloading prolog_codewalk:clause_info/4 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_clause
% autoloading prolog_codewalk:initialization_layout/4 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_clause
% autoloading qsave:current_foreign_library/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/shlib
% autoloading oset:reverse/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/lists
% autoloading record:member/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/lists
% autoloading error:assertion/1 from /Applications/SWI-Prolog.app/Contents/swipl/library/debug
% autoloading prolog_codewalk:clause_name/2 from /Applications/SWI-Prolog.app/Contents/swipl/library/prolog_clause
% Autoloader: iteration 1 resolved 1 predicates and loaded 10 files in 0.055 seconds.  Restarting ...
% Autoloader: loaded 1 files in 2 iterations in 0.107 seconds
true.


#+end_src


* slowly embedding better documentation <2018-04-11 Wed>

[[http://www.swi-prolog.org/pldoc/doc_for?object=section(%27packages/pldoc.html%27)][pldoc reference]]; [[http://www.swi-prolog.org/pldoc/man?section=typetest][types of terms]]

So the documentation can be well structured for html and latex output, and
worth doing eventually.  But right now I just want the little increments to
stick in as I go along.

Pldoc is mostly markdown, with some conflicts with org.  But I think these
are resolvable pretty easily.


Sometimes use :set or :float when that seems important.

*+INPUT, -OUTPUT, ?EITHER*

#+begin_src prolog two examples

%!      predicate(-Arg:type) is nondet
%       Predicate ...


%!      length(+List:list, -Length:int) is det.
%!      length(?List:list, -Length:int) is nondet.
%!      length(?List:list, +Length:int) is det.
%
%       True if List is a list of length Length.
%
%       @compat iso

#+end_src


* prolog packs --- don't bother with these! <2018-03-29 Thu>

SWI has other "libraries" that are maybe community-written, and
unsupported.  There are two handy predicates in list_util --- take_while/3
and drop_while/3 --- both determinate.  So I followed the instructions
[[http://www.swi-prolog.org/pack/list][here]], but there is a problem . . .



#+begin_src prolog trying to get handy-looking list_util, but no dice <2018-03-29 Thu>
?- pack_list(list_util).
% Contacting server at http://www.swi-prolog.org/pack/query ... ok
p list_util@0.12.0          - Predicates for working with lists
true.

?- pack_install(list_util).
% Contacting server at http://www.swi-prolog.org/pack/query ...
ERROR: http://www.swi-prolog.org/pack/query:1:1: Syntax error: End of file in quoted string
^  Exception: (12) setup_call_catcher_cleanup(prolog_pack:http_open('http://www.swi-prolog.org/pack/query', <stream>(0x7f81553e1480,0x7f81551715b0), [post(codes(application/'x-prolog', [108, 111, 99|...])), header(content_type, 'application/x-prolog; charset=UTF8')]), prolog_pack:read_reply('application/x-prolog; charset=UTF8', <stream>(0x7f81553e1480,0x7f81551715b0), _3146), _10952, prolog_pack:close(<stream>(0x7f81553e1480,0x7f81551715b0))) ? 
^  Call: (14) call(prolog_pack:close(<stream>(0x7f81553e1480,0x7f81551715b0))) ? s
^  Exit: (14) call(prolog_pack:close(<stream>(0x7f81553e1480,0x7f81551715b0))) ? 
?- pack_list(list_util).
% Contacting server at http://www.swi-prolog.org/pack/query ...
ERROR: http://www.swi-prolog.org/pack/query:5:18: Syntax error: Unexpected end of file
^  Exception: (12) setup_call_catcher_cleanup(prolog_pack:http_open('http://www.swi-prolog.org/pack/query', <stream>(0x7f81552a2290,0x7f81552a25b0), [post(codes(application/'x-prolog', [115, 101, 97|...])), header(content_type, 'application/x-prolog; charset=UTF8')]), prolog_pack:read_reply('application/x-prolog; charset=UTF8', <stream>(0x7f81552a2290,0x7f81552a25b0), _11994), _19780, prolog_pack:close(<stream>(0x7f81552a2290,0x7f81552a25b0))) ? n
?- 
#+end_src



However, the [[http://www.swi-prolog.org/pack/list?p=list_util][github zip]] downloads fine. In [[file:list_util-0.12.0/][list_util-0.12.0/]].  Right now,
probably it's easier to write a designer predicate, especially because it's
not clear it can use key-valued lists.

Deleted  [[file:list_util-0.12.0/][list_util-0.12.0/]]. 

*** fixing midstring and relatives <2018-04-02 Mon> --- <2018-04-15 Sun>

Have been going through genetic_utilities.pl looking for calls to midstring
and converting these to sub_atom.  Picking up and fixing lots of now-rococo
code en route.  Testing each utility predicate as I go and checking its
usage in external code, but it will be essential to check each external
code file and its predicates.

Added some facts in [[file:demeter_utilities.pl][demeter_utilities.pl]] to remove dependencies on bnd_tree.

Not done with midstring et al yet in genetic_utilities and
demeter_utilities.  Will have to double-check calls of each utility
predicate in external code before testing the latter.


*** fixing singletons <2018-04-09 Mon>

Swipl has the usual singletons (``syntactic''), but also flags singletons
that occur in branches ( ( x -> y ; z ), which by the way they don't
like).  These are ``semantic singletons''.  I had four in
[[file:genetic_utilities.pl][genetic_utilities.pl]]:

   + one a classic typo bug;
   + two were missing cases, so logical bugs;
   + the last was silly, but I fixed it by having a more informative
     warning printed.

So that's pretty good, and convinces me semantic singleton flagging is
useful. 



